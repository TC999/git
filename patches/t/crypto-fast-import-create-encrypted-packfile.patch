From 2937bbd3269732dfe52de78ab48e17965d7108d8 Mon Sep 17 00:00:00 2001
From: Jiang Xin <zhiyou.jx@alibaba-inc.com>
Date: Fri, 19 Feb 2021 14:34:55 +0800
Subject: [PATCH 40/51] crypto: fast-import: create encrypted packfile

Create encrypted packfile in target repository.

Signed-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>
---
 builtin/fast-import.c                       | 38 +++++++++++++++++----
 t/t0940/test-0021-fast-export-and-import.sh |  8 ++---
 2 files changed, 36 insertions(+), 10 deletions(-)

diff --git a/builtin/fast-import.c b/builtin/fast-import.c
index 2bc1773034..db0ae0edef 100644
--- a/builtin/fast-import.c
+++ b/builtin/fast-import.c
@@ -750,6 +750,7 @@ static void start_packfile(void)
 {
 	struct strbuf tmp_file = STRBUF_INIT;
 	struct packed_git *p;
+	union extend_pack_header hdr;
 	int pack_fd;
 
 	pack_fd = odb_mkstemp(&tmp_file, "pack/tmp_pack_XXXXXX");
@@ -759,9 +760,34 @@ static void start_packfile(void)
 	p->pack_fd = pack_fd;
 	p->do_not_close = 1;
 	pack_file = hashfd(pack_fd, p->pack_name);
+	if (agit_crypto_enabled) {
+		pack_file->cryptor = xmalloc(sizeof(struct git_cryptor));
+		git_encryptor_init_for_packfile(pack_file->cryptor);
+		p->cryptor = xmalloc(sizeof(struct git_cryptor));
+		memcpy(p->cryptor, pack_file->cryptor, sizeof(*p->cryptor));
+	} else {
+		pack_file->cryptor = NULL;
+		p->cryptor = NULL;
+	}
+
+	hdr.hdr.hdr_signature = htonl(PACK_SIGNATURE);
+	hdr.hdr.hdr_entries = 0;
+	if (pack_file->cryptor) {
+		hdr.hdr.hdr_version = htonl(git_encryptor_get_host_pack_version(
+			pack_file->cryptor, hdr.ehdr.nonce));
+		if (crypto_pack_has_longer_nonce_for_version(
+			    hdr.hdr.hdr_version)) {
+			pack_size = sizeof(struct pack_header_with_nonce);
+		} else {
+			pack_size = sizeof(struct pack_header);
+		}
+	} else {
+		hdr.hdr.hdr_version = htonl(PACK_VERSION);
+		pack_size = sizeof(struct pack_header);
+	}
+	hashwrite(pack_file, &hdr, pack_size);
 
 	pack_data = p;
-	pack_size = write_pack_header_no_encrypt(pack_file, 0);
 	object_count = 0;
 
 	REALLOC_ARRAY(all_packs, pack_id + 1);
@@ -1033,23 +1059,23 @@ static int store_object(
 
 		hdrlen = encode_in_pack_object_header(hdr, sizeof(hdr),
 						      OBJ_OFS_DELTA, deltalen);
-		hashwrite(pack_file, hdr, hdrlen);
+		hashwrite_try_encrypt(pack_file, hdr, hdrlen);
 		pack_size += hdrlen;
 
 		hdr[pos] = ofs & 127;
 		while (ofs >>= 7)
 			hdr[--pos] = 128 | (--ofs & 127);
-		hashwrite(pack_file, hdr + pos, sizeof(hdr) - pos);
+		hashwrite_try_encrypt(pack_file, hdr + pos, sizeof(hdr) - pos);
 		pack_size += sizeof(hdr) - pos;
 	} else {
 		e->depth = 0;
 		hdrlen = encode_in_pack_object_header(hdr, sizeof(hdr),
 						      type, dat->len);
-		hashwrite(pack_file, hdr, hdrlen);
+		hashwrite_try_encrypt(pack_file, hdr, hdrlen);
 		pack_size += hdrlen;
 	}
 
-	hashwrite(pack_file, out, s.total_out);
+	hashwrite_try_encrypt(pack_file, out, s.total_out);
 	pack_size += s.total_out;
 
 	e->idx.crc32 = crc32_end(pack_file);
@@ -1129,7 +1155,7 @@ static void stream_blob(uintmax_t len, struct object_id *oidout, uintmax_t mark)
 
 		if (!s.avail_out || status == Z_STREAM_END) {
 			size_t n = s.next_out - out_buf;
-			hashwrite(pack_file, out_buf, n);
+			hashwrite_try_encrypt(pack_file, out_buf, n);
 			pack_size += n;
 			s.next_out = out_buf;
 			s.avail_out = out_sz;
diff --git a/t/t0940/test-0021-fast-export-and-import.sh b/t/t0940/test-0021-fast-export-and-import.sh
index 2a9c8d821f..1589900088 100644
--- a/t/t0940/test-0021-fast-export-and-import.sh
+++ b/t/t0940/test-0021-fast-export-and-import.sh
@@ -39,7 +39,7 @@ test_expect_success 'fast-import to normal repo' '
 	)
 '
 
-test_expect_success 'fast-import encrypt repo' '
+test_expect_success 'fast-import to encrypt repo' '
 	create_bare_repo encrypt-loose.git &&
 	(
 		cd encrypt-loose.git &&
@@ -135,9 +135,9 @@ cat >expect_65 <<-EOF &&
 0000000 50 41 43 4b c1 61 72 02 00 00 00 0c                | PACK.ar.....     |
 EOF
 
-test_expect_failure 'after import, packfile is encrypted' '
-	show_pack_header <encrypt-pack.git/objects/pack/pack-*.pack |
-		test-tool agit-od >actual &&
+test_expect_success 'after import, packfile is encrypted' '
+	cat encrypt-pack.git/objects/pack/pack-*.pack |
+		show_pack_header | test-tool agit-od >actual &&
 	test_cmp expect_${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
 '
 
-- 
patchwork
