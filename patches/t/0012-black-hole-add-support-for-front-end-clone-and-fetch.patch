From 56d071b10eb732cf9572ab0e99bb7e9f1a231659 Mon Sep 17 00:00:00 2001
From: Jiang Xin <zhiyou.jx@alibaba-inc.com>
Date: Sun, 7 Jul 2019 20:09:52 +0800
Subject: [PATCH 12/13] black-hole: add support for front-end, clone and fetch

Add "black-hole" feature to front-end: git-clone and git-fetch.

When we test performance and capacity of the git server, we will run
lots of concurrent git fetch (clone) processes on the client. Two many
git fetch processes will consume disk spaces and CPU (for unpack data
from the server) of the client. We add a black-hole mode for git client,
which will throw away packfile data from the server, with no disk space
usage and less CPU.

To test clone without saving pack data in local repository, run:

    $ git clone --black-hole \
          https://github.com/jiangxin/git.git empty-repo

To test clone without saving pack data, but check integrity of the packfile, run:

    $ git clone --black-hole-verify \
          https://github.com/jiangxin/git.git empty-repo

If want to create parallel fetching processes, please try:

    $ git init empty-repo
    $ cd empty-repo
    $ seq 1 10 | parallel --tty -j 5 \
      'echo "process #{}"; git fetch --black-hole <URL> +refs/*:refs/remotes/origin/*'

Signed-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>
---
 builtin/clone.c | 34 +++++++++++++++++++++++++++++++++-
 builtin/fetch.c | 33 ++++++++++++++++++++++++++++++---
 2 files changed, 63 insertions(+), 4 deletions(-)

diff --git a/builtin/clone.c b/builtin/clone.c
index 194d50f75f..7975fee4af 100644
--- a/builtin/clone.c
+++ b/builtin/clone.c
@@ -28,6 +28,7 @@
 #include "sigchain.h"
 #include "branch.h"
 #include "remote.h"
+#include "version.h"
 #include "run-command.h"
 #include "connected.h"
 #include "packfile.h"
@@ -49,6 +50,7 @@ static const char * const builtin_clone_usage[] = {
 };
 
 static int option_no_checkout, option_bare, option_mirror, option_single_branch = -1;
+static int option_black_hole, option_black_hole_verify;
 static int option_local = -1, option_no_hardlinks, option_shared;
 static int option_no_tags;
 static int option_shallow_submodules;
@@ -78,6 +80,9 @@ static int config_filter_submodules = -1;    /* unspecified */
 static struct string_list server_options = STRING_LIST_INIT_NODUP;
 static int option_remote_submodules;
 
+#define STR_(s)	# s
+#define STR(s)	STR_(s)
+
 static int recurse_submodules_cb(const struct option *opt,
 				 const char *arg, int unset)
 {
@@ -93,6 +98,10 @@ static int recurse_submodules_cb(const struct option *opt,
 }
 
 static struct option builtin_clone_options[] = {
+	OPT_BOOL(0, "black-hole", &option_black_hole,
+		 N_("black hole mode, which will throw away data from server")),
+	OPT_BOOL(0, "black-hole-verify", &option_black_hole_verify,
+		 N_("black hole mode, which will validate before throwing data away")),
 	OPT__VERBOSITY(&option_verbosity),
 	OPT_BOOL(0, "progress", &option_progress,
 		 N_("force progress reporting")),
@@ -577,6 +586,9 @@ static void update_remote_refs(const struct ref *refs,
 {
 	const struct ref *rm = mapped_refs;
 
+	if (option_black_hole || option_black_hole_verify)
+		return;
+
 	if (check_connectivity) {
 		struct check_connected_options opt = CHECK_CONNECTED_INIT;
 
@@ -609,6 +621,10 @@ static void update_head(const struct ref *our, const struct ref *remote,
 			const char *msg)
 {
 	const char *head;
+
+	if (option_black_hole || option_black_hole_verify)
+		return;
+
 	if (our && skip_prefix(our->name, "refs/heads/", &head)) {
 		/* Local default branch link */
 		if (create_symref("HEAD", our->name, NULL) < 0)
@@ -666,7 +682,7 @@ static int checkout(int submodule_progress, int filter_submodules)
 	struct tree_desc t;
 	int err = 0;
 
-	if (option_no_checkout)
+	if (option_no_checkout || option_black_hole || option_black_hole_verify)
 		return 0;
 
 	head = resolve_refdup("HEAD", RESOLVE_REF_READING, &oid, NULL);
@@ -1155,6 +1171,8 @@ int cmd_clone(int argc, const char **argv, const char *prefix)
 	path = get_repo_path(remote->url[0], &is_bundle);
 	is_local = option_local != 0 && path && !is_bundle;
 	if (is_local) {
+		if (option_black_hole || option_black_hole_verify)
+			warning(_("--black-hole or --black-hole-verify is ignored in local clones; use file:// instead."));
 		if (option_depth)
 			warning(_("--depth is ignored in local clones; use file:// instead."));
 		if (option_since)
@@ -1189,6 +1207,20 @@ int cmd_clone(int argc, const char **argv, const char *prefix)
 
 	transport_set_option(transport, TRANS_OPT_KEEP, "yes");
 
+	if (option_black_hole || option_black_hole_verify) {
+		struct strbuf buf = STRBUF_INIT;
+		strbuf_addf(&buf, "%s.black-hole", git_version_string);
+		setenv("GIT_USER_AGENT", buf.buf, 1);
+		strbuf_release(&buf);
+
+		if (option_black_hole_verify)
+			transport_set_option(transport, TRANS_OPT_BLACK_HOLE,
+					     STR(FETCH_PACK_OPT_BLACK_HOLE_VERIFY));
+		else if (option_black_hole)
+			transport_set_option(transport, TRANS_OPT_BLACK_HOLE,
+					     STR(FETCH_PACK_OPT_BLACK_HOLE_NO_VERIFY));
+	}
+
 	if (reject_shallow)
 		transport_set_option(transport, TRANS_OPT_REJECT_SHALLOW, "1");
 	if (option_depth)
diff --git a/builtin/fetch.c b/builtin/fetch.c
index e3791f09ed..c49e91826c 100644
--- a/builtin/fetch.c
+++ b/builtin/fetch.c
@@ -13,6 +13,8 @@
 #include "string-list.h"
 #include "remote.h"
 #include "transport.h"
+#include "fetch-pack.h"
+#include "version.h"
 #include "run-command.h"
 #include "parse-options.h"
 #include "sigchain.h"
@@ -32,6 +34,9 @@
 
 #define FORCED_UPDATES_DELAY_WARNING_IN_MS (10 * 1000)
 
+#define STR_(s)	# s
+#define STR(s)	STR_(s)
+
 static const char * const builtin_fetch_usage[] = {
 	N_("git fetch [<options>] [<repository> [<refspec>...]]"),
 	N_("git fetch [<options>] <group>"),
@@ -60,6 +65,7 @@ static int prune_tags = -1; /* unspecified */
 static int all, append, dry_run, force, keep, multiple, update_head_ok;
 static int write_fetch_head = 1;
 static int verbosity, deepen_relative, set_upstream, refetch;
+static int black_hole, black_hole_verify;
 static int progress = -1;
 static int enable_auto_gc = 1;
 static int tags = TAGS_DEFAULT, unshallow, update_shallow, deepen;
@@ -142,6 +148,10 @@ static int parse_refmap_arg(const struct option *opt, const char *arg, int unset
 }
 
 static struct option builtin_fetch_options[] = {
+	OPT_BOOL(0, "black-hole", &black_hole,
+		 N_("black hole mode, which will throw away data from server")),
+	OPT_BOOL(0, "black-hole-verify", &black_hole_verify,
+		 N_("black hole mode, which will validate before throwing data away")),
 	OPT__VERBOSITY(&verbosity),
 	OPT_BOOL(0, "all", &all,
 		 N_("fetch from all remotes")),
@@ -1354,9 +1364,11 @@ static int fetch_and_consume_refs(struct transport *transport,
 	}
 
 	trace2_region_enter("fetch", "consume_refs", the_repository);
-	ret = store_updated_refs(transport->url, transport->remote->name,
-				 connectivity_checked, transaction, ref_map,
-				 fetch_head, worktrees);
+	if (!black_hole && !black_hole_verify) {
+		ret = store_updated_refs(transport->url, transport->remote->name,
+					 connectivity_checked, transaction, ref_map,
+					 fetch_head, worktrees);
+	}
 	trace2_region_leave("fetch", "consume_refs", the_repository);
 
 out:
@@ -1513,6 +1525,10 @@ static struct transport *prepare_transport(struct remote *remote, int deepen)
 	transport = transport_get(remote, NULL);
 	transport_set_verbosity(transport, verbosity, progress);
 	transport->family = family;
+	if (black_hole_verify)
+		set_option(transport, TRANS_OPT_BLACK_HOLE, STR(FETCH_PACK_OPT_BLACK_HOLE_VERIFY));
+	else if (black_hole)
+		set_option(transport, TRANS_OPT_BLACK_HOLE, STR(FETCH_PACK_OPT_BLACK_HOLE_NO_VERIFY));
 	if (upload_pack)
 		set_option(transport, TRANS_OPT_UPLOADPACK, upload_pack);
 	if (keep)
@@ -1944,6 +1960,10 @@ static int fetch_multiple(struct string_list *list, int max_children)
 
 	strvec_pushl(&argv, "fetch", "--append", "--no-auto-gc",
 		     "--no-write-commit-graph", NULL);
+	if (black_hole)
+		strvec_push(&argv, "--black-hole");
+	else if (black_hole_verify)
+		strvec_push(&argv, "--black-hole-verify");
 	add_options_to_argv(&argv);
 
 	if (max_children != 1 && list->nr != 1) {
@@ -2152,6 +2172,13 @@ int cmd_fetch(int argc, const char **argv, const char *prefix)
 		fetch_config_from_gitmodules(sfjc, rs);
 	}
 
+	if (black_hole || black_hole_verify) {
+		struct strbuf buf = STRBUF_INIT;
+		strbuf_addf(&buf, "%s.black-hole", git_version_string);
+		setenv("GIT_USER_AGENT", buf.buf, 1);
+		strbuf_release(&buf);
+	}
+
 	if (negotiate_only && !negotiation_tip.nr)
 		die(_("--negotiate-only needs one or more --negotiation-tip=*"));
 
-- 
2.34.1.51.g7e1f4e9345.agit.6.5.6

