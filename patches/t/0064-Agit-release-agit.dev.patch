From 1008d53c5b67bb844497e088c125e60f7c5ec37e Mon Sep 17 00:00:00 2001
From: Jiang Xin <zhiyou.jx@alibaba-inc.com>
Date: Tue, 30 Oct 2018 15:30:06 +0800
Subject: [PATCH] Agit release 6.5.9

Signed-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>
Signed-off-by: Han Xin <hanxin.hx@alibaba-inc.com>
Signed-off-by: Xu Ziyang <yunhuai.xzy@alibaba-inc.com>
Signed-off-by: Jiuyang Xie <jiuyang.xjy@alibaba-inc.com>
---
 GIT-VERSION-GEN  |   7 ++
 agit-changes.txt | 216 +++++++++++++++++++++++++++++++++++++++++++++++
 agit-release.sh  | 168 ++++++++++++++++++++++++++++++++++++
 agit-version     |   1 +
 4 files changed, 392 insertions(+)
 create mode 100644 agit-changes.txt
 create mode 100755 agit-release.sh
 create mode 100644 agit-version

diff --git a/GIT-VERSION-GEN b/GIT-VERSION-GEN
index 12f26c83d6..7b7a49598f 100755
--- a/GIT-VERSION-GEN
+++ b/GIT-VERSION-GEN
@@ -26,6 +26,13 @@ else
 	VN="$DEF_VER"
 fi
 
+if test -f agit-version
+then
+	AGITVN=$(cat agit-version | sed -e 's/-/./g')
+	AGITVN=$(expr "$AGITVN" : v*'\(.*\)')
+	VN="$VN.agit.$AGITVN"
+fi
+
 VN=$(expr "$VN" : v*'\(.*\)')
 
 if test -r $GVF
diff --git a/agit-changes.txt b/agit-changes.txt
new file mode 100644
index 0000000000..e47884cb1b
--- /dev/null
+++ b/agit-changes.txt
@@ -0,0 +1,216 @@
+How to merge all topic branches
+===============================
+
+Release all topic branches to master branch based on v2.35.1:
+
+	$ sh agit-release.sh master refs/tags/v2.35.1
+
+AGIT Release Notes
+==================
+
+v6.5.8
+------
+* blame-tree: import blame-tree command.
+* object-file: range each file in object subdir instead of range 0 to 255.
+* tempfile: invalid outdated temporary files, default clean those 7 days ago.
+* gc: automatic gc will alse be triggered if there are more than
+  "gc.autoLooseRefsLimit" loose references created.
+* receive-pack: change the writing implementation of info/commits and
+  info/trees to avoid problems caused by concurrent writing.
+
+v6.5.7
+------
+* fetch: add "fetch.writePackedRefs" and "--write-packed-refs" to control
+  whether we should merge new incoming changes with loose references into
+  packed-refs or not.
+* receive-pack: fix bug in record info when do index-pack.
+
+v6.5.6
+------
+* receive-pack: add "receive.maxInputBlobSize" in addtion to
+  "receive.maxInputObjectSize".
+* receive-pack: record large blobs into "info/large-blobs" if
+  "receive.largeblobsinfo" set to true.
+* receive-pack: record commits into "info/commits" if
+  "receive.commitsinfo" set to true.
+* receive-pack: record trees into "info/trees" if "receive.treesinfo" set
+  to true.
+
+v6.5.5
+------
+* unpack-objects: unpack large blob in stream.
+
+v6.5.4
+------
+* upload-pack: call pre-send-pack hook to send notifications
+
+v6.5.3
+------
+* receive-pack: not receive pack file with large object.
+* http: add http.maxReceiveSpeed to limit receiving speed of "git-receive-pack".
+
+v6.5.2
+------
+* 修改 "setup_revisions()"，支持在 "--end-of-options" 参数之后解析 "--not", "--all" 等 revision_pseudo_opts.
+
+v6.5.1
+------
+* 默认关闭对 git-upload-pack 和 git-receive-pack 的 loadavg 限流，可以通过环境变量
+  "AGIT_LOAD_AVG_ENABLED=1" 或者 git 配置变量 "agit.loadavgEnabled=1" 开启限流。
+  默认关闭限流可以避免测试用例因限流失败。
+
+v6.5.0
+------
+* 修正测试用例，集成分支在 GitHub 上全量测试通过。
+* 测试用例：使用 `GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main` 设置缺省分支名为
+  main，避免在强制指定默认分支的测试条件下失败。
+* 测试用例：创建仓库使用 test_create_repo或者新封装的 create_bare_repo，以便
+  创建仓库能够读取 GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME环境变量，创建仓库使用
+  预期的默认分支。
+* 测试用例：使用自定义方法 `make_user_friendly_and_stable_output` 对输出中的
+  提交 ID 做替换，以避免在仓库格式为 SHA256 条件下，提交ID的不一致。
+* 测试用例：使用不同仓库哈希算法，git 传输字节有变动，对传输字节的测试进行替换。
+* 测试用例：使用 prereq 或者其他方式绕过对 git-checksum工具的依赖。
+* 代码中 printf 语句在显示 `unsigned long` 等跨平台长度不一致变量显示的兼容问题，
+  使用强制类型转换，及 %"PRIu64"类似方式。例如:
+
+        fprintf(stderr, 
+                 "local: read %"PRIu64" from server...\t\r", 
+                 (uint64_t)total);
+
+* 优化特性 `topic/0070-agit-gc` 的实现。
+* 限速功能会因为测试时CPU过载导致部分用例执行失败。添加配置变量
+  `agit.loadavgEnabled`，并在测试用例中关闭。
+* 使用 GitHub 上的私有仓库 `gotgit/private-git` 对集成分支进行全量测试.
+
+
+v6.4.1
+------
+* TDE: reduce decrypt size if zlib stream.avali_out is less than size of decrypt buffer.
+
+v6.3.1
+------
+* TDE: Add new crypto algo aes x4. AES_X4(algo type 3) will repeat each byte 
+  of seq for 4 times, and encrypt 64 bytes once. In this mode, we only need 
+  1/4 of calls to do encryption.
+
+
+v6.2.2
+------
+* TDE: bugfix on creating random nonce.
+
+
+v6.2.1
+-----
+* Introduce TDE (transparent-data-encryption).
+
+  - [update] support 24 bytes' header for packfile and fix bug when reuse pack data in encrypted repo with bitmap
+    enabled
+
+
+v6.1.5
+-----
+* Introduce TDE (transparent-data-encryption).
+
+  - [update] fix bug when reuse pack data in encrypted repo with bitmap
+    enabled.
+
+* receive-pack: report fallback to atomic push using rp_warning
+  instead of rp_error.  Fallback to atomic push will increase
+  speed to update repository checksum when there are lots of
+  references need to be updated.
+
+
+v6.1.2
+------
+* Introduce TDE (transparent-data-encryption).
+
+  - [update] fix bug when reuse pack data in encrypted repo with bitmap
+    enabled.
+
+* receive-pack: report fallback to atomic push using rp_warning
+  instead of rp_error.  Fallback to atomic push will increase
+  speed to update repository checksum when there are lots of
+  references need to be updated.
+
+
+v6.0.1
+------
+* git-bundle: Merge upstream improvements, which add --stdin support.
+* proc-receive-hook: Merge upstream improvements on test.
+
+
+v6.0
+-----
+* Base version: git 2.28.0.
+* Use "jx/proc-receive-hook" topic instead of "execute-command" hook.
+
+
+v5.4
+-----
+* Base version: git 2.24.1.
+* agit.gc mode: set big pack threshold automatically for git-gc.
+
+
+v5.3
+-----
+* git-checksum: read ref update cmd from args.
+* git-checksum: save log to file .git/info/checksum.log.
+
+
+v5.2
+-----
+* galileo: refactor agit protocol extension.
+* galileo: return commands list in agit-txt-req-end request.
+
+
+v5.0
+-----
+* galileo: protocol extension for galileo project with new agit-txn capability.
+
+
+v4.5
+-----
+* agit-flow: parse output of `execute-commands` to env_argv and pass to `post-receive`.
+
+
+v4.4
+-----
+* checksum: fallback to atomic push, if too many commands (>100) in one push.
+* agit-flow: fail if there is a special push, but 'execute-commands' hook not exist.
+* agit-flow: add help for hooks.
+
+
+v4.3
+-----
+* Suppress error message if "git-checksum" is not installed.
+* refactor agit-flow patches.
+
+
+v4.2
+------
+* Generate checksum file after writing to repository.
+* Add more test cases.
+* Rebase to Git 2.24.1.
+
+
+v3
+------
+* Git traffic protection by checking loadavg.
+
+
+v2
+------
+* Fix dirname bug, which not work well in MacOS.
+* Add test cases for git-receive-pack for execute-commands hook.
+* Add test cases for last-modified timestamp and agit-repo.lock.
+
+
+v1
+------
+* New command 'git-quiltexport' to export commits to quilt patches.
+* Prohibit to write to repo if there is a 'agit-repo.lock' file at any upword directory.
+* Touch a '.git/info/last-modified' file after write to repo.
+* In order to support centralize workflow like gerrit in git, add a `.git/hooks/execute-commands`
+  hook.  If user has set `receive.executeCommandsRefs` config variables, git will check and mark
+  commands, and run external hook instead of internal functions on marked commands.
diff --git a/agit-release.sh b/agit-release.sh
new file mode 100755
index 0000000000..6d4936078a
--- /dev/null
+++ b/agit-release.sh
@@ -0,0 +1,168 @@
+#!/bin/sh
+
+release="${1:-master}"
+target=${2:-refs/tags/v2.34.0}
+remote="refs/remotes/origin"
+topics="topic/0010-github-action
+	topic/0020-refs-txn-hook
+	topic/0030-black-hole
+	topic/0040-quiltexport
+	topic/0050-rate-limit
+	topic/0060-agit-txn
+	topic/0070-agit-gc
+	topic/0080-transparent-data-encryption
+	topic/0100-end-of-options
+	topic/0110-not-receive-pack-file-with-large-object
+	topic/0112-http-fetch-speed-limit
+	topic/0120-pre-send-pack-hook
+	topic/0130-write-packed-refs
+	topic/0160-auto-gc-if-too-many-loose-refs
+	topic/0173-midx-fixup-deleting-packfile
+  topic/5583-support-read-netrc-file-from-a-specific-path
+	topic/0999-agit-version
+"
+max_count=50
+width=60
+
+die () {
+	if test $# -gt 0
+	then
+		echo >&2 "ERROR: $@"
+	fi
+	exit 1
+}
+
+warning () {
+	echo >&2 "WARNING: $@"
+}
+
+answer_yes () {
+	read answer &&
+	case $answer in
+	y|Y|yes|YES)
+		return 0
+		;;
+	*)
+		;;
+	esac
+	return 1
+}
+
+usage () {
+	cat <<-EOF
+	Usage:
+	        agit-release.sh <releae-branch> <taget-tag>
+
+	Example:
+	        $0 master refs/tags/v2.34.0
+	EOF
+}
+
+if test $# -eq 0
+then
+	usage
+	exit 1
+fi
+
+# Worktree is clean?
+count=$(git status -s -uno -- | wc -l) &&
+if test $count -gt 0
+then
+	die "worktree is not clean: $count modifications"
+fi &&
+
+# Checking release branch.
+if ! git rev-parse "$release" >/dev/null 2>&1
+then
+	printf >&2 "ERROR: cannot find release branch: $release\n"
+	printf >&2 "Please input release branch: "
+	read release
+fi
+
+case $release in
+"")
+	die "release branch is empty"
+	;;
+refs/*)
+	full_release=$release
+	release="${release#refs/heads/}"
+	;;
+*)
+	full_release=refs/heads/$release
+	;;
+esac
+
+if ! git rev-parse "$full_release" >/dev/null 2>&1
+then
+	die "invalid release: $release"
+fi
+
+# Check topic branch
+for t in $topics
+do
+	printf >&2 "Checking topic %*s" -$width "$t..." &&
+	count="$(git rev-list --oneline $target..$t -- | wc -l)" &&
+	if test $count -gt $max_count
+	then
+		warning "more than $max_count commits in topic $t since $target" &&
+		die "wrong target tag ($target)?"
+	fi &&
+	count="$(git rev-list --oneline $t..$remote/$t -- | wc -l)" &&
+	if test $count -gt 0
+	then
+		die "tracking branch has $count commits ahead of topic $t"
+	fi &&
+	count="$(git rev-list --oneline $remote/$t..$t -- | wc -l)" &&
+	if test $count -gt 0
+	then
+		warning "local topic branch '$t' has $count commits ahead" &&
+		printf >&2 "Quilt? " &&
+		if answer_yes
+		then
+			exit 1
+		fi
+	fi &&
+	printf >&2 "\tdone\n"
+done &&
+
+# Switch to target commit
+git checkout -q "$target^{commit}" -- 2>/dev/null &&
+
+# Do rebase
+for t in $topics
+do
+	printf >&2 "Rebasing topic %*s" -$width "$t..." &&
+	git rebase --quiet --reapply-cherry-picks --onto HEAD HEAD "$t^{commit}" --
+	if test $? -ne 0
+	then
+		die "fail to rebase $t"
+	fi &&
+	printf >&2 "\tdone\n"
+done &&
+
+# Show result of rebase.
+rebased=$(git rev-parse HEAD) &&
+echo "Successfully rebase all topics to commit $rebased" &&
+
+# Update release branch
+if test -z "$(git diff $rebased $full_release -- 2>&1)"
+then
+	echo >&2 "WARNING: rebased commit '$rebased' is the same with release '$release'"
+	echo >&2 "WARNING: please check range-diff using: git range-diff $rebased...$release"
+	echo >&2 "WARNING: and update release branch by hand: git update-ref $release $rebased"
+else
+	git update-ref $full_release $rebased -- &&
+	printf "Successfully update $release to $rebased\n"
+
+fi &&
+
+# Checkout branch
+git checkout -q $release -- &&
+if test $? -ne 0
+then
+	die "fail to rebase all topics to $release"
+fi &&
+
+# Notes on how to export patches.
+printf "NOTE: to export all patches, running:\n"
+printf "    git quiltexport --patches patches/ $target..$release\n"
diff --git a/agit-version b/agit-version
new file mode 100644
index 0000000000..fc5c5419b3
--- /dev/null
+++ b/agit-version
@@ -0,0 +1 @@
+6.5.9
-- 
2.34.1.51.g7e1f4e9345.agit.6.5.6

