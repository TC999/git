From 5722f0b92e79e77ed9c8574e4f4e340dc4bf4650 Mon Sep 17 00:00:00 2001
From: Jiang Xin <zhiyou.jx@alibaba-inc.com>
Date: Tue, 28 Jun 2022 15:38:49 +0800
Subject: [PATCH 08/13] black-hole: new option for fetch-pack to discard
 packfile

When we do git-fetch or git-clone, a pair of programs, "fetch-pack" and
"upload-pack", will execute on both the client and server side.

We add new option "--black-hole" and "--black-hole-verify" to "fetch-pack",
in order to discard the received pack file from remote server. This
feature is used only for git test.

The difference between these two options "--black-hole" and
"--black-hole-verify" is whether verify the received pack data or not.

Signed-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>
---
 builtin/fetch-pack.c |  8 ++++++++
 fetch-pack.c         | 47 +++++++++++++++++++++++++++++++++++++++++++-
 fetch-pack.h         | 11 +++++++++++
 3 files changed, 65 insertions(+), 1 deletion(-)

diff --git a/builtin/fetch-pack.c b/builtin/fetch-pack.c
index f045bbbe94..144aba1e9d 100644
--- a/builtin/fetch-pack.c
+++ b/builtin/fetch-pack.c
@@ -67,6 +67,14 @@ int cmd_fetch_pack(int argc, const char **argv, const char *prefix)
 	for (i = 1; i < argc && *argv[i] == '-'; i++) {
 		const char *arg = argv[i];
 
+		if (!strcmp("--black-hole", arg)) {
+			args.black_hole = FETCH_PACK_OPT_BLACK_HOLE_NO_VERIFY;
+			continue;
+		}
+		if (!strcmp("--black-hole-verify", arg)) {
+			args.black_hole = FETCH_PACK_OPT_BLACK_HOLE_VERIFY;
+			continue;
+		}
 		if (skip_prefix(arg, "--upload-pack=", &arg)) {
 			args.uploadpack = arg;
 			continue;
diff --git a/fetch-pack.c b/fetch-pack.c
index 4e1e88eea0..5f6995323a 100644
--- a/fetch-pack.c
+++ b/fetch-pack.c
@@ -888,6 +888,20 @@ static int get_pack(struct fetch_pack_args *args,
 		strvec_push(&cmd.args, alternate_shallow_file);
 	}
 
+	if (args->black_hole == FETCH_PACK_OPT_BLACK_HOLE_VERIFY) {
+		/*
+		 * "do_keep" is a flag to call "git-index-pack" or "git-unpack-objects".
+		 *
+		 * call "git-unpack-objects -n" instead of "git-index-pack"
+		 * to verify pack data before throwing away.
+		 *
+		 */
+		do_keep = 0;
+	} else if (args->black_hole == FETCH_PACK_OPT_BLACK_HOLE_NO_VERIFY) {
+		/* throw away pack data silently, without verify it */
+		goto throw_away;
+	}
+
 	if (fetch_fsck_objects >= 0
 	    ? fetch_fsck_objects
 	    : transfer_fsck_objects >= 0
@@ -895,7 +909,8 @@ static int get_pack(struct fetch_pack_args *args,
 	    : 0)
 		fsck_objects = 1;
 
-	if (do_keep || args->from_promisor || index_pack_args || fsck_objects) {
+	if (!args->black_hole &&
+	    (do_keep || args->from_promisor || index_pack_args || fsck_objects)) {
 		if (pack_lockfiles || fsck_objects)
 			cmd.out = -1;
 		cmd_name = "index-pack";
@@ -939,6 +954,9 @@ static int get_pack(struct fetch_pack_args *args,
 		strvec_push(&cmd.args, cmd_name);
 		if (args->quiet || args->no_progress)
 			strvec_push(&cmd.args, "-q");
+		/* black hole: dry run mode. check without unpack */
+		if (args->black_hole)
+			strvec_push(&cmd.args, "-n");
 		args->check_self_contained_and_connected = 0;
 	}
 
@@ -995,6 +1013,33 @@ static int get_pack(struct fetch_pack_args *args,
 			ret == 0;
 	else
 		die(_("%s failed"), cmd_name);
+
+	goto cleanup;
+
+throw_away:
+	/* consume stdin (demux.out) to discard the received pack data */
+	if (1) {
+		ssize_t total = 0;
+		ssize_t want_size = 8192;
+		char *buf = xmalloc(want_size);
+
+		for (;;) {
+			ssize_t got = read_in_full(demux.out, buf, want_size);
+			if (got < 0) {
+				die("fail to read from server");
+			}
+			total += got;
+			if (got < want_size) {
+				fprintf(stderr, "\n");
+				break;
+			}
+			fprintf(stderr, "local: read %"PRIu64" from server...\t\r", (uint64_t)total);
+		}
+		fprintf(stderr, "NOTE: read total %"PRIu64" bytes of pack data from server.\n", (uint64_t)total);
+		free(buf);
+	}
+
+cleanup:
 	if (use_sideband && finish_async(&demux))
 		die(_("error in sideband demultiplexer"));
 
diff --git a/fetch-pack.h b/fetch-pack.h
index 8c7752fc82..9d8676c515 100644
--- a/fetch-pack.h
+++ b/fetch-pack.h
@@ -7,6 +7,9 @@
 #include "list-objects-filter-options.h"
 #include "oidset.h"
 
+#define FETCH_PACK_OPT_BLACK_HOLE_VERIFY	1
+#define FETCH_PACK_OPT_BLACK_HOLE_NO_VERIFY	2
+
 struct oid_array;
 
 struct fetch_pack_args {
@@ -24,6 +27,14 @@ struct fetch_pack_args {
 	 */
 	const struct oid_array *negotiation_tips;
 
+	/*
+	 * Run fetch, but throw away data.
+	 *
+	 *  1: throw away pack data but still try to verify.
+	 *  2: throw away pack data silently.
+	 */
+	unsigned black_hole:2;
+
 	unsigned deepen_relative:1;
 	unsigned quiet:1;
 	unsigned keep_pack:1;
-- 
2.34.1.51.g7e1f4e9345.agit.6.5.6

