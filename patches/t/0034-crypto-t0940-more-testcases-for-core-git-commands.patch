From 0f6a68b08677e3135d23d8e94371ba6f15db0664 Mon Sep 17 00:00:00 2001
From: Jiang Xin <zhiyou.jx@alibaba-inc.com>
Date: Tue, 29 Dec 2020 16:22:29 +0800
Subject: [PATCH 34/42] crypto: t0940: more testcases for core git commands

Some test cases failed, and will be fixed later.

Signed-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>
Signed-off-by: Han Xin <hanxin.hx@alibaba-inc.com>
---
 t/t0940-crypto-repository.sh                  | 111 +++++++++++
 t/t0940/README.md                             | 184 ++++++++++++++++++
 t/t0940/common-functions.sh                   | 129 ++++++++++++
 t/t0940/packfile-test-functions.sh            |   2 +-
 t/t0940/test-1000-init.sh                     |  13 ++
 t/t0940/test-1001-gc.sh                       | 104 ++++++++++
 t/t0940/test-1002-fsck.sh                     |  21 ++
 t/t0940/test-1003-loose-object.sh             | 136 +++++++++++++
 t/t0940/test-1004-clone.sh                    |  21 ++
 t/t0940/test-1005-fetch.sh                    |  27 +++
 t/t0940/test-1006-push.sh                     |  26 +++
 t/t0940/test-1007-rev-list.sh                 |  22 +++
 .../test-1008-archive-and-upload-archive.sh   |  28 +++
 t/t0940/test-1009-blame.sh                    |  31 +++
 t/t0940/test-1010-branch.sh                   |  32 +++
 t/t0940/test-1011-bundle.sh                   | 107 ++++++++++
 t/t0940/test-1012-cat-file.sh                 |  58 ++++++
 t/t0940/test-1013-commit-tree.sh              |  50 +++++
 t/t0940/test-1014-count-objects.sh            |   8 +
 t/t0940/test-1015-describe.sh                 |  20 ++
 t/t0940/test-1016-diff.sh                     |  13 ++
 t/t0940/test-1017-format-patch.sh             |  20 ++
 t/t0940/test-1019-log.sh                      |  13 ++
 t/t0940/test-1020-ls-tree.sh                  |  12 ++
 t/t0940/test-1021-merge-base.sh               |  12 ++
 t/t0940/test-1022-mktree.sh                   |  30 +++
 t/t0940/test-1023-midx.sh                     |  22 +++
 t/t0940/test-1024-name-rev.sh                 |  31 +++
 t/t0940/test-1025-pack-refs.sh                |  31 +++
 t/t0940/test-1026-prune.sh                    |  19 ++
 t/t0940/test-1027-read-tree.sh                |  15 ++
 t/t0940/test-1028-rev-parse.sh                |  36 ++++
 t/t0940/test-1029-show.sh                     |  86 ++++++++
 t/t0940/test-1030-show-ref.sh                 |  36 ++++
 t/t0940/test-1031-tag-and-verify-tag.sh       |  70 +++++++
 t/t0940/test-1032-update-ref.sh               |  40 ++++
 t/t0940/test-1033-unpack-file.sh              |  63 ++++++
 t/t0940/test-1034-verify-commit.sh            |  34 ++++
 t/t0940/test-1035-verify-pack.sh              |  11 ++
 t/t0940/test-1036-write-tree.sh               |  61 ++++++
 t/t0940/test-1037-unpack-objects.sh           |  63 ++++++
 t/t0940/test-1039-gc-and-repack.sh            |  83 ++++++++
 42 files changed, 1930 insertions(+), 1 deletion(-)
 create mode 100644 t/t0940/common-functions.sh
 create mode 100644 t/t0940/test-1000-init.sh
 create mode 100644 t/t0940/test-1001-gc.sh
 create mode 100644 t/t0940/test-1002-fsck.sh
 create mode 100644 t/t0940/test-1003-loose-object.sh
 create mode 100644 t/t0940/test-1004-clone.sh
 create mode 100644 t/t0940/test-1005-fetch.sh
 create mode 100644 t/t0940/test-1006-push.sh
 create mode 100644 t/t0940/test-1007-rev-list.sh
 create mode 100644 t/t0940/test-1008-archive-and-upload-archive.sh
 create mode 100644 t/t0940/test-1009-blame.sh
 create mode 100644 t/t0940/test-1010-branch.sh
 create mode 100644 t/t0940/test-1011-bundle.sh
 create mode 100644 t/t0940/test-1012-cat-file.sh
 create mode 100644 t/t0940/test-1013-commit-tree.sh
 create mode 100644 t/t0940/test-1014-count-objects.sh
 create mode 100644 t/t0940/test-1015-describe.sh
 create mode 100644 t/t0940/test-1016-diff.sh
 create mode 100644 t/t0940/test-1017-format-patch.sh
 create mode 100644 t/t0940/test-1019-log.sh
 create mode 100644 t/t0940/test-1020-ls-tree.sh
 create mode 100644 t/t0940/test-1021-merge-base.sh
 create mode 100644 t/t0940/test-1022-mktree.sh
 create mode 100644 t/t0940/test-1023-midx.sh
 create mode 100644 t/t0940/test-1024-name-rev.sh
 create mode 100644 t/t0940/test-1025-pack-refs.sh
 create mode 100644 t/t0940/test-1026-prune.sh
 create mode 100644 t/t0940/test-1027-read-tree.sh
 create mode 100644 t/t0940/test-1028-rev-parse.sh
 create mode 100644 t/t0940/test-1029-show.sh
 create mode 100644 t/t0940/test-1030-show-ref.sh
 create mode 100644 t/t0940/test-1031-tag-and-verify-tag.sh
 create mode 100644 t/t0940/test-1032-update-ref.sh
 create mode 100644 t/t0940/test-1033-unpack-file.sh
 create mode 100644 t/t0940/test-1034-verify-commit.sh
 create mode 100644 t/t0940/test-1035-verify-pack.sh
 create mode 100644 t/t0940/test-1036-write-tree.sh
 create mode 100644 t/t0940/test-1037-unpack-objects.sh
 create mode 100644 t/t0940/test-1039-gc-and-repack.sh

diff --git a/t/t0940-crypto-repository.sh b/t/t0940-crypto-repository.sh
index 5573b2cc99..a392c3e31f 100755
--- a/t/t0940-crypto-repository.sh
+++ b/t/t0940-crypto-repository.sh
@@ -9,12 +9,29 @@ Run all test cases under t0940/test-*.sh using:
 If want to load specific test script inside t0940/, using:
 
     $ GIT_TEST_LOAD=0001 sh t0940-crypto-repository.sh
+
+Layout of default repository:
+
+    File: README.txt      : File: README.txt       : File: topic-1.txt
+                          :                        :
+                          :                        :
+        +--- o (A)        :      +--- o (D)        :
+       /                  :     /                  :
+      /  +-- o (B, v1)    :    /  +-- o (E, v3)    :
+      | /                 :    | /                 :    +-- o (G) [topic/1]
+      |/                  :    |/                  :   /
+    --+----- o (C, V2) ---+----+----- o (F, v4) ---+--+           [main]
+                          :                        :
+           <PACK1>        :         <PACK2>        :
+          unencrypted     :        encrypted       :        encrypted
 '
 
 GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
 export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
 
 . ./test-lib.sh
+. "$TEST_DIRECTORY"/t0940/common-functions.sh
+. "$TEST_DIRECTORY/lib-gpg.sh"
 
 create_bare_repo () {
 	test "$#" = 1 ||
@@ -156,6 +173,100 @@ run_crypto_test_once () {
 }
 
 run_crypto_test () {
+	reset_test_tick &&
+	cd "$TRASH_DIRECTORY" &&
+
+	test_expect_success "common: init gitdir" '
+		rm -rf "$COMMON_GITDIR" &&
+		create_bare_repo "$COMMON_GITDIR" &&
+		git -C "$COMMON_GITDIR" config receive.unpackLimit 100 &&
+		git -C "$COMMON_GITDIR" config core.abbrev 7 &&
+		git clone "$COMMON_GITDIR" workdir &&
+		test -d "$COMMON_GITDIR"
+	'
+
+	test_expect_success "common: first round of push" '
+		# loose commit, which need to prune (no reference linked with it)
+		test_commit_setvar -C workdir A "Commit-A" README.txt &&
+		git -C workdir push &&
+
+		# amend to create loose commit A, which will have a tag linked with it.
+		test_commit_setvar -C workdir --append --amend B "Commit-B" README.txt &&
+		git -C workdir push -f &&
+
+		# amend to create commit B, which will be packed later
+		test_commit_setvar -C workdir --append --amend C "Commit-C" README.txt &&
+		git -C workdir push -f
+	'
+
+	test_expect_success "common: run git-gc to create unencrypted pack" '
+		git -C "$COMMON_GITDIR" gc &&
+		PACK1=$(ls "$COMMON_GITDIR/objects/pack/" | grep "pack$" | sed -e "s/.*pack-\(.*\).pack$/\1/") &&
+		test -f "$COMMON_GITDIR"/objects/pack/pack-$PACK1.pack &&
+		touch   "$COMMON_GITDIR"/objects/pack/pack-$PACK1.keep &&
+		git -C "$COMMON_GITDIR" fsck
+	'
+
+	test_expect_success "common: enable crypto settings" '
+		git -C "$COMMON_GITDIR" config agit.crypto.enabled 1 &&
+		git -C "$COMMON_GITDIR" config agit.crypto.secret c2VjcmV0LXRva2VuMTIzNA== &&
+		git -C "$COMMON_GITDIR" config agit.crypto.nonce random_nonce
+	'
+
+	test_expect_success "common: 2nd round of push" '
+		# loose encrypted commit, which need to prune (no reference linked with it)
+		test_commit_setvar -C workdir --append D "Commit-D" README.txt &&
+		git -C workdir push &&
+
+		# loose encrypted commit, which will have a tag linked
+		test_commit_setvar -C workdir --append --amend E "Commit-E" README.txt &&
+		git -C workdir push -f &&
+
+		# push the amended commit, so there will be a loos commit after git-gc
+		test_commit_setvar -C workdir --append --amend F "Commit-F" README.txt &&
+		git -C workdir push -f
+	'
+
+	test_expect_success "common: run git-gc to create encrypted pack" '
+		git -C "$COMMON_GITDIR" gc &&
+		PACK2=$(ls "$COMMON_GITDIR/objects/pack/" | grep "pack$" | grep -v "$PACK1" | sed -e "s/.*pack-\(.*\).pack$/\1/") &&
+		test -f "$COMMON_GITDIR"/objects/pack/pack-$PACK2.pack &&
+		touch   "$COMMON_GITDIR"/objects/pack/pack-$PACK2.keep &&
+		git -C "$COMMON_GITDIR" fsck
+	'
+
+	test_expect_success "common: create new branch" '
+		git -C workdir checkout -b topic/1 &&
+		test_commit_setvar -C workdir --append G "Commit-G" topic-1.txt &&
+		git -C workdir push -u origin topic/1
+	'
+
+	test_expect_success "common: create tags" '
+		test_commit_setvar -C workdir --tag TAG1 v1 $B &&
+		test_commit_setvar -C workdir --tag TAG2 v2 $C &&
+		test_commit_setvar -C workdir --tag TAG3 v3 $E &&
+		test_commit_setvar -C workdir --tag TAG4 v4 $F &&
+		git -C workdir push origin --tags
+	'
+
+	test_expect_success "common: show-ref" '
+		git -C "$COMMON_GITDIR" show-ref |
+			make_user_friendly_and_stable_output >actual &&
+		cat >expect <<-EOF &&
+		<COMMIT-F> refs/heads/main
+		<COMMIT-G> refs/heads/topic/1
+		<TAG-1> refs/tags/v1
+		<TAG-2> refs/tags/v2
+		<TAG-3> refs/tags/v3
+		<TAG-4> refs/tags/v4
+		EOF
+		test_cmp expect actual
+	'
+
+	test_expect_success "common: cleanup" '
+		rm -rf workdir
+	'
+
 	if test -z "$GIT_TEST_LOAD"
 	then
 		GIT_TEST_LOAD="[0-9][0-9][0-9][0-9]"
diff --git a/t/t0940/README.md b/t/t0940/README.md
index 7b3ce895aa..8101b8f742 100644
--- a/t/t0940/README.md
+++ b/t/t0940/README.md
@@ -8,3 +8,187 @@
 如果只想执行 `t0940/` 下的部分命令，执行：
 
     $ GIT_TEST_LOAD=0001 sh t0940-crypto-repository.sh
+
+
+# 服务端核心 Git 命令测试覆盖
+
+    命令                          | 测试用例
+    ------------------------------|----------------------------
+    annotate                      | 0009
+    archive                       | 0008
+    blame                         | 0009
+    branch                        | 0010
+    bundle                        | 0011
+    cat-file                      | 0012
+    clone                         | 0004
+    commit-tree                   | 0013
+    config                        | 0001
+    count-objects                 | 0014
+    describe                      | 0015
+    diff                          | 0016
+    fast-export                   | 0038
+    fast-import                   | 0038
+    fetch                         | 0005
+    format-patch                  | 0017
+    fsck                          | 0002
+    gc                            | 0001
+    hash-object                   | 0018 0022 0036
+    http-push                     | 0006
+    init                          | 0000
+    log                           | 0013 0019
+    ls-tree                       | 0020 0022 0036
+    merge-base                    | 0021
+    mktree                        | 0022 0036
+    multi-pack-index              | 0023
+    name-rev                      | 0024
+    pack-refs                     | 0025
+    prune                         | 0026
+    push                          | 0003 0006
+    read-tree                     | 0027 0036
+    rev-list                      | 0007
+    rev-parse                     | 0013 0028
+    show                          | 0029
+    show-ref                      | 0030
+    tag                           | 0031
+    unpack-file                   | 0033
+    unpack-objects                | 0037
+    update-ref                    | 0013 0032
+    upload-archive                | 0008
+    verify-commit                 | 0034
+    verify-pack                   | 0035
+    verify-tag                    | 0031
+    write-tree                    | 0036
+
+
+# 其他 Git 命令测试覆盖
+
+    命令                          | 测试用例
+    ------------------------------|----------------------------
+    add                           |
+    am                            |
+    apply                         |
+    archimport                    |
+    bisect                        |
+    bisect--helper                |
+    bugreport                     |
+    check-attr                    |
+    check-ignore                  |
+    check-mailmap                 |
+    check-ref-format              |
+    checkout                      |
+    checkout-index                |
+    cherry                        |
+    cherry-pick                   |
+    citool                        |
+    clean                         |
+    column                        |
+    commit                        |
+    commit-graph                  |
+    credential                    |
+    credential-cache              |
+    credential-cache--daemon      |
+    credential-store              |
+    cvsexportcommit               |
+    cvsimport                     |
+    cvsserver                     |
+    daemon                        |
+    diff-files                    |
+    diff-index                    |
+    diff-tree                     |
+    difftool                      |
+    difftool--helper              |
+    env--helper                   |
+    fetch-pack                    |
+    filter-branch                 |
+    fmt-merge-msg                 |
+    for-each-ref                  |
+    for-each-repo                 |
+    fsck-objects                  |
+    get-tar-commit-id             |
+    grep                          |
+    gui                           |
+    gui--askpass                  |
+    help                          |
+    http-backend                  |
+    http-fetch                    |
+    http-push                     |
+    imap-send                     |
+    index-pack                    |
+    init-db                       |
+    instaweb                      |
+    interpret-trailers            |
+    ls-files                      |
+    ls-remote                     |
+    mailinfo                      |
+    mailsplit                     |
+    maintenance                   |
+    merge                         |
+    merge-file                    |
+    merge-index                   |
+    merge-octopus                 |
+    merge-one-file                |
+    merge-ours                    |
+    merge-recursive               |
+    merge-recursive-ours          |
+    merge-recursive-theirs        |
+    merge-resolve                 |
+    merge-subtree                 |
+    merge-tree                    |
+    mergetool                     |
+    mktag                         |
+    mv                            |
+    notes                         |
+    p4                            |
+    pack-objects                  |
+    pack-redundant                |
+    patch-id                      |
+    pickaxe                       |
+    prune-packed                  |
+    pull                          |
+    quiltimport                   |
+    range-diff                    |
+    rebase                        |
+    rebase--interactive           |
+    receive-pack                  |
+    reflog                        |
+    remote                        |
+    remote-ext                    |
+    remote-fd                     |
+    remote-ftp                    |
+    remote-ftps                   |
+    remote-http                   |
+    remote-https                  |
+    repack                        |
+    replace                       |
+    request-pull                  |
+    rerere                        |
+    reset                         |
+    restore                       |
+    revert                        |
+    rm                            |
+    send-email                    |
+    send-pack                     |
+    sh-i18n--envsubst             |
+    shell                         |
+    shortlog                      |
+    show-branch                   |
+    show-index                    |
+    sparse-checkout               |
+    stage                         |
+    stash                         |
+    status                        |
+    stripspace                    |
+    submodule                     |
+    submodule--helper             |
+    svn                           |
+    switch                        |
+    symbolic-ref                  |
+    update-index                  |
+    update-server-info            |
+    upload-archive--writer        |
+    upload-pack                   |
+    var                           |
+    version                       |
+    web--browse                   |
+    whatchanged                   |
+    worktree                      |
diff --git a/t/t0940/common-functions.sh b/t/t0940/common-functions.sh
new file mode 100644
index 0000000000..9097f592b0
--- /dev/null
+++ b/t/t0940/common-functions.sh
@@ -0,0 +1,129 @@
+# Create a commit or tag and set the variable with the object ID.
+test_commit_setvar () {
+	amend=
+	append=
+	notick=
+	signoff=
+	indir=
+	merge=
+	tag=
+	var=
+
+	while test $# != 0
+	do
+		case "$1" in
+		--merge)
+			merge=t
+			;;
+		--tag)
+			tag=t
+			;;
+		--amend)
+			amend="--amend"
+			;;
+		--append)
+			append=t
+			;;
+		--notick)
+			notick=t
+			;;
+		--signoff)
+			signoff="$1"
+			;;
+		-C)
+			shift
+			indir="$1"
+			;;
+		-*)
+			echo >&2 "error: unknown option $1"
+			return 1
+			;;
+		*)
+			break
+			;;
+		esac
+		shift
+	done
+	if test $# -lt 2
+	then
+		echo >&2 "error: test_commit_setvar must have at least 2 arguments"
+		return 1
+	fi
+	var=$1
+	shift
+	indir=${indir:+"$indir"/}
+	if test -z "$notick"
+	then
+		test_tick
+	fi &&
+	if test -n "$merge"
+	then
+		git ${indir:+ -C "$indir"} merge --no-edit --no-ff \
+			${2:+-m "$2"} "$1" &&
+		oid=$(git ${indir:+ -C "$indir"} rev-parse HEAD)
+	elif test -n "$tag"
+	then
+		git ${indir:+ -C "$indir"} tag -m "$1" "$1" "${2:-HEAD}" &&
+		oid=$(git ${indir:+ -C "$indir"} rev-parse "$1")
+	else
+		file=${2:-"$1.t"} &&
+		if test -n "$append"
+		then
+			echo "${3-$1}" >>"$indir$file"
+		else
+			echo "${3-$1}" >"$indir$file"
+		fi &&
+		git ${indir:+ -C "$indir"} add "$file" &&
+		git ${indir:+ -C "$indir"} commit $amend $signoff -m "$1" &&
+		oid=$(git ${indir:+ -C "$indir"} rev-parse HEAD)
+	fi &&
+	eval $var=$oid
+}
+
+get_abbrev_oid () {
+	oid=$1 &&
+	suffix=${oid#???????} &&
+	oid=${oid%$suffix} &&
+	if test -n "$oid"
+	then
+		echo "$oid"
+	else
+		echo "undefined-oid"
+	fi
+}
+
+# Format the output of git-push, git-show-ref and other commands to make a
+# user-friendly and stable text.  We can easily prepare the expect text
+# without having to worry about future changes of the commit ID and spaces
+# of the output.  Single quotes are replaced with double quotes, because
+# it is boring to prepare unquoted single quotes in expect text.  We also
+# remove some locale error messages, which break test if we turn on
+# `GIT_TEST_GETTEXT_POISON=true` in order to test unintentional translations
+# on plumbing commands.
+make_user_friendly_and_stable_output () {
+	_x40="$_x35$_x05"
+
+	sed \
+		-e "s/$(get_abbrev_oid $A)[0-9a-f]*/<COMMIT-A>/g" \
+		-e "s/$(get_abbrev_oid $B)[0-9a-f]*/<COMMIT-B>/g" \
+		-e "s/$(get_abbrev_oid $C)[0-9a-f]*/<COMMIT-C>/g" \
+		-e "s/$(get_abbrev_oid $D)[0-9a-f]*/<COMMIT-D>/g" \
+		-e "s/$(get_abbrev_oid $E)[0-9a-f]*/<COMMIT-E>/g" \
+		-e "s/$(get_abbrev_oid $F)[0-9a-f]*/<COMMIT-F>/g" \
+		-e "s/$(get_abbrev_oid $G)[0-9a-f]*/<COMMIT-G>/g" \
+		-e "s/$(get_abbrev_oid $H)[0-9a-f]*/<COMMIT-H>/g" \
+		-e "s/$(get_abbrev_oid $I)[0-9a-f]*/<COMMIT-I>/g" \
+		-e "s/$(get_abbrev_oid $J)[0-9a-f]*/<COMMIT-J>/g" \
+		-e "s/$(get_abbrev_oid $K)[0-9a-f]*/<COMMIT-K>/g" \
+		-e "s/$(get_abbrev_oid $TAG1)[0-9a-f]*/<TAG-1>/g" \
+		-e "s/$(get_abbrev_oid $TAG2)[0-9a-f]*/<TAG-2>/g" \
+		-e "s/$(get_abbrev_oid $TAG3)[0-9a-f]*/<TAG-3>/g" \
+		-e "s/$(get_abbrev_oid $TAG4)[0-9a-f]*/<TAG-4>/g" \
+		-e "s/  *\$//" \
+		-e "s/   */ /g" \
+		-e "s/'/\"/g" \
+		-e "s/	/    /g" \
+		-e "s/$_x40[0-9a-f]*/<OID>/g" \
+		-e "s/^index $_x05[0-9a-f]*\.\.$_x05[0-9a-f]*/index <OID1>..<OID2>/" \
+		-e "s/$ZERO_OID/<ZERO-OID>/g"
+}
diff --git a/t/t0940/packfile-test-functions.sh b/t/t0940/packfile-test-functions.sh
index b6bc261279..497f55a550 100644
--- a/t/t0940/packfile-test-functions.sh
+++ b/t/t0940/packfile-test-functions.sh
@@ -21,7 +21,7 @@ init_git_crypto_settings () {
 	done
 
 	git ${indir:+ -C "$indir"} config agit.crypto.enabled $enable &&
-	git ${indir:+ -C "$indir"} config agit.crypto.secret nekot-terces &&
+	git ${indir:+ -C "$indir"} config agit.crypto.secret c2VjcmV0LXRva2VuMTIzNA== &&
 	git ${indir:+ -C "$indir"} config agit.crypto.nonce random_nonce
 }
 
diff --git a/t/t0940/test-1000-init.sh b/t/t0940/test-1000-init.sh
new file mode 100644
index 0000000000..ce5fbf2a9b
--- /dev/null
+++ b/t/t0940/test-1000-init.sh
@@ -0,0 +1,13 @@
+#!/bin/sh
+
+# Test crypto on "git-gc"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'run git-init in encrypt repo' '
+	git -C bare.git \
+		-c init.defaultBranch="${GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME-master}" \
+		init --bare
+'
diff --git a/t/t0940/test-1001-gc.sh b/t/t0940/test-1001-gc.sh
new file mode 100644
index 0000000000..c764eeba22
--- /dev/null
+++ b/t/t0940/test-1001-gc.sh
@@ -0,0 +1,104 @@
+#!/bin/sh
+
+# Test crypto on "git-gc"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'check header of packfile without encryption' '
+	test_copy_bytes 8 <bare.git/objects/pack/pack-$PACK1.pack |
+		test-tool agit-od >actual &&
+	cat >expect <<-EOF &&
+	0000000 50 41 43 4b 00 00 00 02                            | PACK....         |
+	EOF
+	test_cmp expect actual
+'
+
+# algorithm: benchmark, block size: 16
+cat >expect_1 <<-EOF &&
+0000000 50 41 43 4b 81 00 00 02 00 00 00 03 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+# algorithm: aes, block size: 16
+cat >expect_2 <<-EOF &&
+0000000 50 41 43 4b 82 00 00 02 00 00 00 03 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+cat >expect_64 <<-EOF
+0000000 50 41 43 4b c0 61 72 02 00 00 00 03                | PACK.ar.....     |
+EOF
+
+cat >expect_65 <<-EOF
+0000000 50 41 43 4b c1 61 72 02 00 00 00 03                | PACK.ar.....     |
+EOF
+
+test_expect_success 'check header of encrypted packfile' '
+	show_pack_header <bare.git/objects/pack/pack-$PACK2.pack |
+		test-tool agit-od >actual &&
+	test_cmp expect_${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
+'
+
+test_expect_success 'remove keep files' '
+	(
+		cd bare.git &&
+		rm objects/pack/pack-$PACK1.keep && 
+		rm objects/pack/pack-$PACK2.keep
+	)
+'
+
+test_expect_success 'turn off crypto settings' '
+	git -C bare.git config agit.crypto.enabled 0 &&
+	git -C bare.git config --unset agit.crypto.secret
+'
+
+test_expect_success 'fail to gc on encrypted repo without proper config' '
+	test_must_fail git -C bare.git gc
+'
+
+test_expect_success 'fail to gc on encrypted repo with bad secret' '
+	test_must_fail env GIT_CONFIG_PARAMETERS="${SQ}agit.crypto.enabled=1${SQ} ${SQ}agit.crypto.secret=bad-secret${SQ}" \
+		git -C bare.git gc
+'
+
+test_expect_success 'gc with crypto config using GIT_CONFIG_PARAMETERS' '
+	GIT_CONFIG_PARAMETERS="${SQ}agit.crypto.enabled=1${SQ} ${SQ}agit.crypto.secret=c2VjcmV0LXRva2VuMTIzNA==${SQ}" \
+		git -C bare.git gc &&
+	GIT_CONFIG_PARAMETERS="${SQ}agit.crypto.enabled=1${SQ} ${SQ}agit.crypto.secret=c2VjcmV0LXRva2VuMTIzNA==${SQ}" \
+		git -C bare.git fsck
+'
+
+test_expect_success 'pack1 not exist' '
+	test ! -f bare.git/objects/pack/pack-$PACK1.pack
+'
+
+test_expect_success 'pack2 not exist' '
+	test ! -f bare.git/objects/pack/pack-$PACK2.pack
+'
+
+cat >expect_1 <<-EOF &&
+0000000 50 41 43 4b 81 00 00 02 00 00 00 13 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+cat >expect_2 <<-EOF &&
+0000000 50 41 43 4b 82 00 00 02 00 00 00 13 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+cat >expect_64 <<-EOF
+0000000 50 41 43 4b c0 61 72 02 00 00 00 13                | PACK.ar.....     |
+EOF
+
+cat >expect_65 <<-EOF
+0000000 50 41 43 4b c1 61 72 02 00 00 00 13                | PACK.ar.....     |
+EOF
+
+test_expect_success 'pack to one encrypted file' '
+	packid=$(ls "bare.git/objects/pack/" | grep "pack$" | sed -e "s/.*pack-\(.*\).pack$/\1/") &&
+	show_pack_header <bare.git/objects/pack/pack-$packid.pack >output &&
+		test-tool agit-od <output >actual &&
+	test_cmp expect_${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
+'
diff --git a/t/t0940/test-1002-fsck.sh b/t/t0940/test-1002-fsck.sh
new file mode 100644
index 0000000000..37e12df8e0
--- /dev/null
+++ b/t/t0940/test-1002-fsck.sh
@@ -0,0 +1,21 @@
+#!/bin/sh
+
+# Test crypto on "git-fsck"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'fsck' '
+	git -C bare.git fsck
+'
+
+test_expect_success 'pack and fsck' '
+	(
+		cd bare.git &&
+		rm objects/pack/pack-$PACK1.keep && 
+		rm objects/pack/pack-$PACK2.keep && 
+		git gc &&
+		git fsck
+	)
+'
diff --git a/t/t0940/test-1003-loose-object.sh b/t/t0940/test-1003-loose-object.sh
new file mode 100644
index 0000000000..09fc6025b4
--- /dev/null
+++ b/t/t0940/test-1003-loose-object.sh
@@ -0,0 +1,136 @@
+#!/bin/sh
+
+# Test loose objects of an encrypted repository
+
+test_expect_success 'setup' '
+	(
+		create_bare_repo normal.git &&
+		cd normal.git &&
+		git config receive.unpackLimit 100
+	) &&
+	(
+		create_bare_repo encrypt.git &&
+		cd encrypt.git &&
+		git config receive.unpackLimit 100 &&
+		git config agit.crypto.enabled 1 &&
+		git config agit.crypto.secret c2VjcmV0LXRva2VuMTIzNA== &&
+		git config agit.crypto.nonce random_nonce
+	) &&
+	test_create_repo workdir &&
+	printf "demo\n" >workdir/README.txt &&
+	git -C workdir add README.txt &&
+	test_tick &&
+	git -C workdir commit -m "Initial" &&
+	oid=$(git -C workdir rev-parse HEAD:README.txt)
+'
+
+test_expect_success 'push to normal.git' '
+	(
+		cd workdir &&
+		git push ../normal.git main
+	)
+'
+
+test_expect_success 'push to encrypt.git' '
+	(
+		cd workdir &&
+		git push ../encrypt.git main
+	)
+'
+
+cat >expect-hdr-normal <<-\EOF
+	0000000 78 01                                              | x.               |
+	EOF
+
+cat >expect-hdr-algo-1 <<-\EOF
+	0000000 45 4e 43 00 81 00 00 00 72 61 6e 64 6f 6d 5f 6e    | ENC.....random_n |
+	0000016 6f 6e 63 65                                        | once             |
+	EOF
+
+cat >expect-hdr-algo-2 <<-\EOF
+	0000000 45 4e 43 00 82 00 00 00 72 61 6e 64 6f 6d 5f 6e    | ENC.....random_n |
+	0000016 6f 6e 63 65                                        | once             |
+	EOF
+
+cat >expect-hdr-algo-64 <<-\EOF
+	0000000 45 4e 43 00 c0 00 00 00 72 61 6e 64 6f 6d 5f 6e    | ENC.....random_n |
+	0000016 6f 6e 63 65                                        | once             |
+	EOF
+
+cat >expect-hdr-algo-65 <<-\EOF
+	0000000 45 4e 43 00 c1 00 00 00 72 61 6e 64 6f 6d 5f 6e    | ENC.....random_n |
+	0000016 6f 6e 63 65                                        | once             |
+	EOF
+
+########## blob ##########
+test_expect_success 'hexdump of blob (normal)' '
+	test_copy_bytes 2 <normal.git/objects/${oid%${oid#??}}/${oid#??} |
+		test-tool agit-od >actual &&
+	test_cmp expect-hdr-normal actual
+'
+
+test_expect_success 'hexdump of blob (encrypt)' '
+	show_lo_header <encrypt.git/objects/${oid%${oid#??}}/${oid#??} |
+		test-tool agit-od >actual &&
+	test_cmp expect-hdr-algo-${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
+'
+
+########## commit ##########
+test_expect_success 'hexdump of commit (normal)' '
+	oid=$(git -C workdir rev-parse HEAD) &&
+	test_copy_bytes 2 <normal.git/objects/${oid%${oid#??}}/${oid#??} |
+		test-tool agit-od >actual &&
+	test_cmp expect-hdr-normal actual
+'
+
+test_expect_success 'hexdump of commit (encrypt)' '
+	show_lo_header <encrypt.git/objects/${oid%${oid#??}}/${oid#??} |
+		test-tool agit-od >actual &&
+	test_cmp expect-hdr-algo-${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
+'
+
+########## tree ##########
+test_expect_success 'hexdump of tree (normal)' '
+	oid=$(git -C workdir rev-parse "HEAD^{tree}") &&
+	test_copy_bytes 2 <normal.git/objects/${oid%${oid#??}}/${oid#??} |
+		test-tool agit-od >actual &&
+	test_cmp expect-hdr-normal actual
+'
+
+test_expect_success 'hexdump of tree (encrypt)' '
+	show_lo_header <encrypt.git/objects/${oid%${oid#??}}/${oid#??} |
+		test-tool agit-od >actual &&
+	test_cmp expect-hdr-algo-${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
+'
+
+test_expect_success 'fsck ok for normal.git' '
+	git -C normal.git fsck
+'
+
+test_expect_success 'fsck ok for normal.git with encrypt settigns' '
+	GIT_CONFIG_PARAMETERS="${SQ}agit.crypto.enabled=1${SQ} ${SQ}agit.crypto.secret=c2VjcmV0LXRva2VuMTIzNA==${SQ}" \
+		git -C normal.git fsck
+'
+
+test_expect_success 'fsck ok for encrypt.git' '
+	git -C encrypt.git fsck
+'
+
+test_expect_success 'turn off crypto settings' '
+	git -C encrypt.git config agit.crypto.enabled 0 &&
+	git -C encrypt.git config --unset agit.crypto.secret
+'
+
+test_expect_success 'fail to fsck on encrypted loose objects without proper config' '
+	test_must_fail git -C encrypt.git fsck
+'
+
+test_expect_success 'set crypto config using GIT_CONFIG_PARAMETERS' '
+	GIT_CONFIG_PARAMETERS="${SQ}agit.crypto.enabled=1${SQ} ${SQ}agit.crypto.secret=c2VjcmV0LXRva2VuMTIzNA==${SQ}" \
+		git -C encrypt.git fsck
+'
+
+test_expect_success 'fail to fsck on encrypted loose object with bad secret' '
+	test_must_fail env GIT_CONFIG_PARAMETERS="${SQ}agit.crypto.enabled=1${SQ} ${SQ}agit.crypto.secret=bad-secret${SQ}" \
+		git -C encrypt.git fsck
+'
diff --git a/t/t0940/test-1004-clone.sh b/t/t0940/test-1004-clone.sh
new file mode 100644
index 0000000000..0476cbc5a8
--- /dev/null
+++ b/t/t0940/test-1004-clone.sh
@@ -0,0 +1,21 @@
+#!/bin/sh
+
+# Test crypto on "git-clone"
+
+test_expect_failure 'clone from common gitdir' '
+	git clone --no-local "$COMMON_GITDIR" workdir
+'
+
+test_expect_failure 'run fsck on workdir' '
+	git -C workdir fsck
+'
+
+test_expect_failure 'check log of main' '
+	git -C workdir log --oneline |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F> Commit-F
+	<COMMIT-C> Commit-C
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1005-fetch.sh b/t/t0940/test-1005-fetch.sh
new file mode 100644
index 0000000000..6f3ca85af5
--- /dev/null
+++ b/t/t0940/test-1005-fetch.sh
@@ -0,0 +1,27 @@
+#!/bin/sh
+
+# Test crypto on "git-fetch"
+
+test_expect_failure 'fetch repo with encrypt packfile' '
+	(
+		test_create_repo workdir &&
+		cd workdir &&
+		git remote add origin "$COMMON_GITDIR" &&
+		git fetch &&
+		git merge --ff-only origin/main
+	)
+'
+
+test_expect_success 'run fsck on workdir' '
+	git -C workdir fsck
+'
+
+test_expect_failure 'check log of main' '
+	git -C workdir log --oneline |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F> Commit-F
+	<COMMIT-C> Commit-C
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1006-push.sh b/t/t0940/test-1006-push.sh
new file mode 100644
index 0000000000..0e28da2ce9
--- /dev/null
+++ b/t/t0940/test-1006-push.sh
@@ -0,0 +1,26 @@
+#!/bin/sh
+
+# Test crypto on "git-push"
+
+test_expect_failure 'push encrypted repo to normal repo' '
+	cp -R "$COMMON_GITDIR" encrypt.git &&
+	create_bare_repo normal.git &&
+	(
+		cd encrypt.git &&
+		git push ../normal.git --mirror
+	)
+'
+
+test_expect_success 'run fsck on normal repo' '
+	git -C normal.git fsck
+'
+
+test_expect_failure 'check log of main' '
+	git -C normal.git log --oneline |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F> Commit-F
+	<COMMIT-C> Commit-C
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1007-rev-list.sh b/t/t0940/test-1007-rev-list.sh
new file mode 100644
index 0000000000..583cd21317
--- /dev/null
+++ b/t/t0940/test-1007-rev-list.sh
@@ -0,0 +1,22 @@
+#!/bin/sh
+
+# Test crypto on "git-rev-list"
+
+test_expect_success 'rev-list main..topic/1' '
+	git -C "$COMMON_GITDIR" rev-list main..topic/1 |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-G>
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'rev-list v3...main' '
+	git -C "$COMMON_GITDIR" rev-list v3...main |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F>
+	<COMMIT-E>
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1008-archive-and-upload-archive.sh b/t/t0940/test-1008-archive-and-upload-archive.sh
new file mode 100644
index 0000000000..7cadb9635a
--- /dev/null
+++ b/t/t0940/test-1008-archive-and-upload-archive.sh
@@ -0,0 +1,28 @@
+#!/bin/sh
+
+# Test crypto on "git-archive and git-upload-archive"
+
+test_expect_success 'archive main' '
+	git -C "$COMMON_GITDIR" archive \
+		--prefix=main/ -o "$(pwd)/archive.tar.gz" main &&
+	tar ztf archive.tar.gz >actual &&
+	cat >expect <<-EOF &&
+	main/
+	main/README.txt
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'remote archive for git-upload-archive testing' '
+	git archive \
+		--remote "$COMMON_GITDIR" \
+		--prefix=main/ \
+		-o remote-archive.tar.gz \
+		main &&
+	tar ztf remote-archive.tar.gz >actual &&
+	cat >expect <<-EOF &&
+	main/
+	main/README.txt
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1009-blame.sh b/t/t0940/test-1009-blame.sh
new file mode 100644
index 0000000000..63c0a6b157
--- /dev/null
+++ b/t/t0940/test-1009-blame.sh
@@ -0,0 +1,31 @@
+#!/bin/sh
+
+# Test crypto on "git-blame"
+
+test_expect_success 'blame on README.txt' '
+	git -C "$COMMON_GITDIR" blame README.txt |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	^<COMMIT-C> (A U Thor 2005-04-07 15:13:13 -0700 1) Commit-A
+	^<COMMIT-C> (A U Thor 2005-04-07 15:13:13 -0700 2) Commit-B
+	^<COMMIT-C> (A U Thor 2005-04-07 15:13:13 -0700 3) Commit-C
+	<COMMIT-F> (A U Thor 2005-04-07 15:16:13 -0700 4) Commit-D
+	<COMMIT-F> (A U Thor 2005-04-07 15:16:13 -0700 5) Commit-E
+	<COMMIT-F> (A U Thor 2005-04-07 15:16:13 -0700 6) Commit-F
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'annotate on README.txt' '
+	git -C "$COMMON_GITDIR" annotate README.txt |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-C>    ( A U Thor    2005-04-07 15:13:13 -0700    1)Commit-A
+	<COMMIT-C>    ( A U Thor    2005-04-07 15:13:13 -0700    2)Commit-B
+	<COMMIT-C>    ( A U Thor    2005-04-07 15:13:13 -0700    3)Commit-C
+	<COMMIT-F>    ( A U Thor    2005-04-07 15:16:13 -0700    4)Commit-D
+	<COMMIT-F>    ( A U Thor    2005-04-07 15:16:13 -0700    5)Commit-E
+	<COMMIT-F>    ( A U Thor    2005-04-07 15:16:13 -0700    6)Commit-F
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1010-branch.sh b/t/t0940/test-1010-branch.sh
new file mode 100644
index 0000000000..ca6f012efa
--- /dev/null
+++ b/t/t0940/test-1010-branch.sh
@@ -0,0 +1,32 @@
+#!/bin/sh
+
+# Test crypto on "git-branch"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'create new branch' '
+	git -C bare.git branch topic/2 main
+'
+
+test_expect_success 'branch' '
+	git -C bare.git branch >actual &&
+	cat >expect <<-EOF &&
+	* main
+	  topic/1
+	  topic/2
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'branch -v' '
+	git -C bare.git branch -v |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	* main <COMMIT-F> Commit-F
+	 topic/1 <COMMIT-G> Commit-G
+	 topic/2 <COMMIT-F> Commit-F
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1011-bundle.sh b/t/t0940/test-1011-bundle.sh
new file mode 100644
index 0000000000..a2064766fd
--- /dev/null
+++ b/t/t0940/test-1011-bundle.sh
@@ -0,0 +1,107 @@
+#!/bin/sh
+
+# Test crypto on "git-bundle"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'create unencrypted bundle from main' '
+	git -C "$COMMON_GITDIR" bundle create \
+		"$(pwd)/1.bundle" \
+		main &&
+	test -f 1.bundle
+'
+
+test_expect_failure 'clone from unencrypted bundle' '
+	git clone --mirror 1.bundle repo1.git &&
+	git -C repo1.git show-ref |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+		<COMMIT-F> refs/heads/main
+		EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'create additional unencrypted bundle' '
+	git -C "$COMMON_GITDIR" bundle create \
+		"$(pwd)/2.bundle" \
+		--all --not main &&
+	test -f 2.bundle
+'
+
+test_expect_failure 'fetch from additional bundle' '
+	(
+		cd repo1.git &&
+		git fetch ../2.bundle "+refs/*:refs/*"
+	) &&
+	git -C repo1.git show-ref |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F> refs/heads/main
+	<COMMIT-G> refs/heads/topic/1
+	<TAG-1> refs/tags/v1
+	<TAG-2> refs/tags/v2
+	<TAG-3> refs/tags/v3
+	<TAG-4> refs/tags/v4
+	EOF
+	test_cmp expect actual
+'
+
+###################################
+test_expect_failure 'create encrypted bundle from main' '
+	git -C "$COMMON_GITDIR" bundle create \
+		--encrypt \
+		"$(pwd)/3.bundle" \
+		topic/1 &&
+	test -f 3.bundle
+'
+
+test_expect_success 'cannot clone from encrypted bundle without crypto settings' '
+	create_bare_repo repo2.git &&
+	(
+		cd repo2.git &&
+		test_must_fail git fetch ../3.bundle "+refs/heads/*:refs/heads/*"
+	)
+'
+
+test_expect_failure 'fetch from encrypted bundle' '
+	(
+		cd repo2.git &&
+		git config agit.crypto.enabled 1 &&
+		git config agit.crypto.secret c2VjcmV0LXRva2VuMTIzNA== &&
+		git config agit.crypto.nonce random_nonce &&
+		git fetch ../3.bundle "+refs/heads/*:refs/heads/*"
+	) &&
+	git -C repo2.git show-ref |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-G> refs/heads/topic/1
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_failure 'create additional encrypted bundle' '
+	git -C "$COMMON_GITDIR" bundle create \
+		--encrypt \
+		"$(pwd)/4.bundle" \
+		--tags --not topic/1 &&
+	test -f 4.bundle
+'
+
+test_expect_failure 'fetch from additional encrypted bundle' '
+	(
+		cd repo2.git &&
+		git fetch ../4.bundle "+refs/*:refs/*"
+	) &&
+	git -C repo2.git show-ref |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-G> refs/heads/topic/1
+	<TAG-1> refs/tags/v1
+	<TAG-2> refs/tags/v2
+	<TAG-3> refs/tags/v3
+	<TAG-4> refs/tags/v4
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1012-cat-file.sh b/t/t0940/test-1012-cat-file.sh
new file mode 100644
index 0000000000..06e7eff6ed
--- /dev/null
+++ b/t/t0940/test-1012-cat-file.sh
@@ -0,0 +1,58 @@
+#!/bin/sh
+
+# Test crypto on "git-cat-file"
+
+test_expect_success 'cat $A' '
+	git -C "$COMMON_GITDIR" cat-file -p $A |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	tree <OID>
+	author A U Thor <author@example.com> 1112911993 -0700
+	committer C O Mitter <committer@example.com> 1112911993 -0700
+	
+	Commit-A
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'cat $D' '
+	git -C "$COMMON_GITDIR" cat-file -p $D |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	tree <OID>
+	parent <COMMIT-C>
+	author A U Thor <author@example.com> 1112912173 -0700
+	committer C O Mitter <committer@example.com> 1112912173 -0700
+	
+	Commit-D
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'cat $E' '
+	git -C "$COMMON_GITDIR" cat-file -p $E |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	tree <OID>
+	parent <COMMIT-C>
+	author A U Thor <author@example.com> 1112912173 -0700
+	committer C O Mitter <committer@example.com> 1112912233 -0700
+	
+	Commit-E
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'cat $F' '
+	git -C "$COMMON_GITDIR" cat-file -p $F |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	tree <OID>
+	parent <COMMIT-C>
+	author A U Thor <author@example.com> 1112912173 -0700
+	committer C O Mitter <committer@example.com> 1112912293 -0700
+	
+	Commit-F
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1013-commit-tree.sh b/t/t0940/test-1013-commit-tree.sh
new file mode 100644
index 0000000000..5a49a53986
--- /dev/null
+++ b/t/t0940/test-1013-commit-tree.sh
@@ -0,0 +1,50 @@
+#!/bin/sh
+
+# Test crypto on "git-commit-tree"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'create new commit using commit-tree' '
+	tree=$(git -C bare.git rev-parse "HEAD^{tree}") &&
+	parent=$(git -C bare.git rev-parse "HEAD") &&
+	test_tick &&
+	oid=$(git -C bare.git commit-tree -p "$parent" -m "New commit by commit-tree" "$tree") &&
+	git -C bare.git update-ref refs/heads/main $oid &&
+	git -C bare.git log --pretty="%s" main >actual &&
+	cat >expect <<-EOF &&
+	New commit by commit-tree
+	Commit-F
+	Commit-C
+	EOF
+	test_cmp expect actual
+'
+
+# algorithm: hash
+cat >expect_blob_1 <<-\EOF
+0000000 45 4e 43 00 81 00 00 00 72 61 6e 64 6f 6d 5f 6e    | ENC.....random_n |
+0000016 6f 6e 63 65                                        | once             |
+EOF
+
+# algorithm: aes
+cat >expect_blob_2 <<-\EOF
+0000000 45 4e 43 00 82 00 00 00 72 61 6e 64 6f 6d 5f 6e    | ENC.....random_n |
+0000016 6f 6e 63 65                                        | once             |
+EOF
+
+cat >expect_blob_64 <<-EOF
+0000000 45 4e 43 00 c0 00 00 00 72 61 6e 64 6f 6d 5f 6e    | ENC.....random_n |
+0000016 6f 6e 63 65                                        | once             |
+EOF
+
+cat >expect_blob_65 <<-EOF
+0000000 45 4e 43 00 c1 00 00 00 72 61 6e 64 6f 6d 5f 6e    | ENC.....random_n |
+0000016 6f 6e 63 65                                        | once             |
+EOF
+
+test_expect_success 'new commit should be encrypted' '
+	show_lo_header <bare.git/objects/${oid%${oid#??}}/${oid#??} |
+		test-tool agit-od >actual &&
+	test_cmp expect_blob_${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
+'
diff --git a/t/t0940/test-1014-count-objects.sh b/t/t0940/test-1014-count-objects.sh
new file mode 100644
index 0000000000..ef58cc16a5
--- /dev/null
+++ b/t/t0940/test-1014-count-objects.sh
@@ -0,0 +1,8 @@
+#!/bin/sh
+
+# Test crypto on "git-count-objects"
+
+test_expect_success 'count-objects' '
+	git -C "$COMMON_GITDIR" count-objects >actual &&
+	grep -w "19 objects" actual
+'
diff --git a/t/t0940/test-1015-describe.sh b/t/t0940/test-1015-describe.sh
new file mode 100644
index 0000000000..c33f180811
--- /dev/null
+++ b/t/t0940/test-1015-describe.sh
@@ -0,0 +1,20 @@
+#!/bin/sh
+
+# Test crypto on "git-describe"
+
+test_expect_success 'describe main' '
+	git -C "$COMMON_GITDIR" describe main >actual &&
+	cat >expect <<-EOF &&
+	v4
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'describe topic/1' '
+	git -C "$COMMON_GITDIR" describe topic/1 |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	v4-1-g<COMMIT-G>
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1016-diff.sh b/t/t0940/test-1016-diff.sh
new file mode 100644
index 0000000000..803736f5b7
--- /dev/null
+++ b/t/t0940/test-1016-diff.sh
@@ -0,0 +1,13 @@
+#!/bin/sh
+
+# Test crypto on "git-diff"
+
+test_expect_success 'diff v1 main' '
+	git -C "$COMMON_GITDIR" diff --stat v1 main |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	 README.txt | 4 ++++
+	 1 file changed, 4 insertions(+)
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1017-format-patch.sh b/t/t0940/test-1017-format-patch.sh
new file mode 100644
index 0000000000..276ef47c1a
--- /dev/null
+++ b/t/t0940/test-1017-format-patch.sh
@@ -0,0 +1,20 @@
+#!/bin/sh
+
+# Test crypto on "git-format-patch"
+
+test_expect_success 'format-patch' '
+	git -C "$COMMON_GITDIR" format-patch -o "$(pwd)" main~ &&
+	head -8 0001-Commit-F.patch |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	From <COMMIT-F> Mon Sep 17 00:00:00 2001
+	From: A U Thor <author@example.com>
+	Date: Thu, 7 Apr 2005 15:16:13 -0700
+	Subject: [PATCH] Commit-F
+
+	---
+	 README.txt | 3 +++
+	 1 file changed, 3 insertions(+)
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1019-log.sh b/t/t0940/test-1019-log.sh
new file mode 100644
index 0000000000..b074e1dd53
--- /dev/null
+++ b/t/t0940/test-1019-log.sh
@@ -0,0 +1,13 @@
+#!/bin/sh
+
+# Test crypto on "git-log"
+
+test_expect_success 'git log --oneline main' '
+	git -C "$COMMON_GITDIR" log --oneline main |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F> Commit-F
+	<COMMIT-C> Commit-C
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1020-ls-tree.sh b/t/t0940/test-1020-ls-tree.sh
new file mode 100644
index 0000000000..386beaa4e6
--- /dev/null
+++ b/t/t0940/test-1020-ls-tree.sh
@@ -0,0 +1,12 @@
+#!/bin/sh
+
+# Test crypto on "git-ls-tree"
+
+test_expect_success 'ls-tree main' '
+	git -C "$COMMON_GITDIR" ls-tree -r main |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	100644 blob <OID>    README.txt
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1021-merge-base.sh b/t/t0940/test-1021-merge-base.sh
new file mode 100644
index 0000000000..6e47e2ab3f
--- /dev/null
+++ b/t/t0940/test-1021-merge-base.sh
@@ -0,0 +1,12 @@
+#!/bin/sh
+
+# Test crypto on "git-merge-base"
+
+test_expect_success 'merge-basse of v4 topic-1' '
+	git -C "$COMMON_GITDIR" merge-base -a v4 topic/1 |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F>
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1022-mktree.sh b/t/t0940/test-1022-mktree.sh
new file mode 100644
index 0000000000..f86bba8989
--- /dev/null
+++ b/t/t0940/test-1022-mktree.sh
@@ -0,0 +1,30 @@
+#!/bin/sh
+
+# Test crypto on "git-mktree"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'mktree to create new tree object' '
+	(
+		cat >data <<-EOF &&
+			Input data for hash-object.
+			EOF
+		cd bare.git &&
+		# create object
+		oid=$(git hash-object -t blob -w ../data) &&
+		git ls-tree -r main >../tree.txt &&
+		cat >>../tree.txt <<-EOF &&
+		100644 blob $oid	hash-object.txt
+		EOF
+		# create tree
+		tid=$(git mktree <../tree.txt) &&
+		git ls-tree -r $tid
+	) | make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	100644 blob <OID>    README.txt
+	100644 blob <OID>    hash-object.txt
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1023-midx.sh b/t/t0940/test-1023-midx.sh
new file mode 100644
index 0000000000..8493d49e50
--- /dev/null
+++ b/t/t0940/test-1023-midx.sh
@@ -0,0 +1,22 @@
+#!/bin/sh
+
+# Test crypto on "git-multi-pack-index"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'multi-pack-index write' '
+	(
+		cd bare.git &&
+		git multi-pack-index write &&
+		test -f objects/pack/multi-pack-index
+	)
+'
+
+test_expect_success 'multi-pack-index verify' '
+	(
+		cd bare.git &&
+		git multi-pack-index verify
+	)
+'
diff --git a/t/t0940/test-1024-name-rev.sh b/t/t0940/test-1024-name-rev.sh
new file mode 100644
index 0000000000..62195379d4
--- /dev/null
+++ b/t/t0940/test-1024-name-rev.sh
@@ -0,0 +1,31 @@
+#!/bin/sh
+
+# Test crypto on "git-name-rev"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'git name-rev main' '
+	(
+		cd bare.git &&
+		git name-rev main
+	) >actual &&
+	cat >expect <<-EOF &&
+	main tags/v4^0
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'name-rev on deleted tag v3' '
+	(
+		cd bare.git &&
+		tag=$(git rev-parse v3^{commit}) &&
+		git tag -d v3 >/dev/null 2>&1 &&
+		git name-rev $tag
+	) | make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-E> undefined
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1025-pack-refs.sh b/t/t0940/test-1025-pack-refs.sh
new file mode 100644
index 0000000000..b8a52ec96c
--- /dev/null
+++ b/t/t0940/test-1025-pack-refs.sh
@@ -0,0 +1,31 @@
+#!/bin/sh
+
+# Test crypto on "git-pack-refs"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'has loose refs' '
+	(
+		cd bare.git &&
+		test -f refs/heads/topic/1 &&
+		test -f refs/tags/v1 &&
+		test -f refs/tags/v2 &&
+		test -f refs/tags/v3 &&
+		test -f refs/tags/v4
+	)
+'
+
+test_expect_success 'git pack-refs --all' '
+	(
+		cd bare.git &&
+		git pack-refs --all &&
+		test -f packed-refs &&
+		test ! -f refs/heads/topic/1 &&
+		test ! -f refs/tags/v1 &&
+		test ! -f refs/tags/v2 &&
+		test ! -f refs/tags/v3 &&
+		test ! -f refs/tags/v4
+	)
+'
diff --git a/t/t0940/test-1026-prune.sh b/t/t0940/test-1026-prune.sh
new file mode 100644
index 0000000000..25e97de238
--- /dev/null
+++ b/t/t0940/test-1026-prune.sh
@@ -0,0 +1,19 @@
+#!/bin/sh
+
+# Test crypto on "git-prune"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'prune loose objects' '
+	(
+		cd bare.git &&
+		find objects -type f >../before-prune.list &&
+		git tag -d v1 &&
+		git tag -d v3 &&
+		git prune --expire=now &&
+		find objects -type f >../after-prune.list
+	) &&
+	! test_cmp  before-prune.list after-prune.list
+'
diff --git a/t/t0940/test-1027-read-tree.sh b/t/t0940/test-1027-read-tree.sh
new file mode 100644
index 0000000000..8439699246
--- /dev/null
+++ b/t/t0940/test-1027-read-tree.sh
@@ -0,0 +1,15 @@
+#!/bin/sh
+
+# Test crypto on "git-read-tree"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'read-tree to specific file' '
+	(
+		cd bare.git &&
+		git read-tree --index-output=new-index main &&
+		test -f new-index
+	)
+'
diff --git a/t/t0940/test-1028-rev-parse.sh b/t/t0940/test-1028-rev-parse.sh
new file mode 100644
index 0000000000..31216ce66b
--- /dev/null
+++ b/t/t0940/test-1028-rev-parse.sh
@@ -0,0 +1,36 @@
+#!/bin/sh
+
+# Test crypto on "git-rev-parse"
+
+test_expect_success 'git rev-parse main' '
+	(
+		cd "$COMMON_GITDIR" &&
+		git rev-parse main
+	) | make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+		<COMMIT-F>
+		EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'git rev-parse v1^{commit}' '
+	(
+		cd "$COMMON_GITDIR" &&
+		git rev-parse v1^{commit} 
+	) | make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-B>
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'git rev-parse v2^{commit}' '
+	(
+		cd "$COMMON_GITDIR" &&
+		git rev-parse v3^{commit} 
+	) | make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-E>
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1029-show.sh b/t/t0940/test-1029-show.sh
new file mode 100644
index 0000000000..4df05a2105
--- /dev/null
+++ b/t/t0940/test-1029-show.sh
@@ -0,0 +1,86 @@
+#!/bin/sh
+
+# Test crypto on "git-show"
+
+test_expect_success 'git show main' '
+	git -C "$COMMON_GITDIR" show main |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	commit <COMMIT-F>
+	Author: A U Thor <author@example.com>
+	Date: Thu Apr 7 15:16:13 2005 -0700
+	
+	 Commit-F
+	
+	diff --git a/README.txt b/README.txt
+	index <OID1>..<OID2> 100644
+	--- a/README.txt
+	+++ b/README.txt
+	@@ -1,3 +1,6 @@
+	 Commit-A
+	 Commit-B
+	 Commit-C
+	+Commit-D
+	+Commit-E
+	+Commit-F
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'git show v1' '
+	git -C "$COMMON_GITDIR" show v1 |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	tag v1
+	Tagger: C O Mitter <committer@example.com>
+	Date: Thu Apr 7 15:20:13 2005 -0700
+	
+	v1
+	
+	commit <COMMIT-B>
+	Author: A U Thor <author@example.com>
+	Date: Thu Apr 7 15:13:13 2005 -0700
+	
+	 Commit-B
+	
+	diff --git a/README.txt b/README.txt
+	new file mode 100644
+	index <OID1>..<OID2>
+	--- /dev/null
+	+++ b/README.txt
+	@@ -0,0 +1,2 @@
+	+Commit-A
+	+Commit-B
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'git show v3' '
+	git -C "$COMMON_GITDIR" show v3 |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	tag v3
+	Tagger: C O Mitter <committer@example.com>
+	Date: Thu Apr 7 15:22:13 2005 -0700
+	
+	v3
+	
+	commit <COMMIT-E>
+	Author: A U Thor <author@example.com>
+	Date: Thu Apr 7 15:16:13 2005 -0700
+	
+	 Commit-E
+	
+	diff --git a/README.txt b/README.txt
+	index <OID1>..<OID2> 100644
+	--- a/README.txt
+	+++ b/README.txt
+	@@ -1,3 +1,5 @@
+	 Commit-A
+	 Commit-B
+	 Commit-C
+	+Commit-D
+	+Commit-E
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1030-show-ref.sh b/t/t0940/test-1030-show-ref.sh
new file mode 100644
index 0000000000..36569ea6a3
--- /dev/null
+++ b/t/t0940/test-1030-show-ref.sh
@@ -0,0 +1,36 @@
+#!/bin/sh
+
+# Test crypto on "git-show-ref"
+
+test_expect_success 'git show-ref' '
+	git -C "$COMMON_GITDIR" show-ref |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F> refs/heads/main
+	<COMMIT-G> refs/heads/topic/1
+	<TAG-1> refs/tags/v1
+	<TAG-2> refs/tags/v2
+	<TAG-3> refs/tags/v3
+	<TAG-4> refs/tags/v4
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'git show-ref --verify refs/heads/main' '
+	git -C "$COMMON_GITDIR" show-ref --head --dereference |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F> HEAD
+	<COMMIT-F> refs/heads/main
+	<COMMIT-G> refs/heads/topic/1
+	<TAG-1> refs/tags/v1
+	<COMMIT-B> refs/tags/v1^{}
+	<TAG-2> refs/tags/v2
+	<COMMIT-C> refs/tags/v2^{}
+	<TAG-3> refs/tags/v3
+	<COMMIT-E> refs/tags/v3^{}
+	<TAG-4> refs/tags/v4
+	<COMMIT-F> refs/tags/v4^{}
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1031-tag-and-verify-tag.sh b/t/t0940/test-1031-tag-and-verify-tag.sh
new file mode 100644
index 0000000000..3d938ed54c
--- /dev/null
+++ b/t/t0940/test-1031-tag-and-verify-tag.sh
@@ -0,0 +1,70 @@
+#!/bin/sh
+
+# Test crypto on "git-tag" and "git-verify-tag"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'git tag -l' '
+	git -C bare.git tag -l |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	v1
+	v2
+	v3
+	v4
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'git tag -l -n1' '
+	git -C bare.git tag -l -n1 |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	v1 v1
+	v2 v2
+	v3 v3
+	v4 v4
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success GPG 'create signed tags' '
+	(
+		cd bare.git &&
+		test_tick &&
+		git tag -s -m "v1 signed" v1.s v1 &&
+		git tag -s -m "v2 signed" v2.s v2 &&
+		git tag -s -m "v3 signed" v3.s v3 &&
+		git tag -s -m "v4 signed" v4.s v4
+	)
+'
+
+test_expect_success GPG 'call git-tag to verify signed tags' '
+	(
+		cd bare.git &&
+		git tag -v \
+			v1.s \
+			v2.s \
+			v3.s \
+			v4.s
+	)
+'
+
+test_expect_success GPG 'call git-verify-tag to verify signed tags' '
+	(
+		cd bare.git &&
+		git verify-tag -v \
+			v1.s \
+			v2.s \
+			v3.s \
+			v4.s
+	)
+'
+
+test_expect_success GPG 'show signed tags' '
+	git -C bare.git show v1.s |
+		make_user_friendly_and_stable_output >actual &&
+	grep "BEGIN PGP SIGNATURE" actual
+'
diff --git a/t/t0940/test-1032-update-ref.sh b/t/t0940/test-1032-update-ref.sh
new file mode 100644
index 0000000000..6263cae514
--- /dev/null
+++ b/t/t0940/test-1032-update-ref.sh
@@ -0,0 +1,40 @@
+#!/bin/sh
+
+# Test crypto on "git-update-ref"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+	
+test_expect_success 'git update-ref' '
+	(
+		cd bare.git &&
+		git update-ref -d refs/tags/v1 &&
+		git update-ref -d refs/tags/v2 &&
+		git update-ref -d refs/tags/v3 &&
+		git update-ref -d refs/tags/v4 &&
+		git show-ref
+	) | make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F> refs/heads/main
+	<COMMIT-G> refs/heads/topic/1
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'git update-ref --stdin' '
+	(
+		cd bare.git &&
+		git update-ref --stdin <<-EOF &&
+			update refs/heads/main $E $F
+			create refs/heads/next $F
+			delete refs/heads/topic/1
+			EOF
+		git show-ref
+	) | make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-E> refs/heads/main
+	<COMMIT-F> refs/heads/next
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1033-unpack-file.sh b/t/t0940/test-1033-unpack-file.sh
new file mode 100644
index 0000000000..b73374e326
--- /dev/null
+++ b/t/t0940/test-1033-unpack-file.sh
@@ -0,0 +1,63 @@
+#!/bin/sh
+
+# Test crypto on "git-unpack-file"
+
+#
+# File: README.txt      : File: README.txt       : File: topic-1.txt
+#                       :                        :
+#     +--- o (A)        :      +--- o (D)        :  
+#    /                  :     /                  : 
+#   /  +-- o (B, v1)    :    /  +-- o (E, v3)    :     
+#   | /                 :    | /                 :    +-- o (G) [topic/1]
+#   |/                  :    |/                  :   /
+# --+----- o (C, V2) ---+----+----- o (F, v4) ---+--+           [main]
+#                       :                        :
+#        <PACK1>        :         <PACK2>        :
+#       unencrypted     :        encrypted       :        encrypted
+#
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'unpack-file for unencrypted loose object' '
+	oid=$(git -C bare.git rev-parse $A:README.txt) &&
+	tmpfile=$(git -C bare.git unpack-file $oid) &&
+	cat >expect <<-EOF &&
+	Commit-A
+	EOF
+	test_cmp expect "bare.git/$tmpfile"
+'
+
+test_expect_success 'unpack-file for unencrypted packed object' '
+	oid=$(git -C bare.git rev-parse $C:README.txt) &&
+	tmpfile=$(git -C bare.git unpack-file $oid) &&
+	cat >expect <<-EOF &&
+	Commit-A
+	Commit-B
+	Commit-C
+	EOF
+	test_cmp expect "bare.git/$tmpfile"
+'
+
+test_expect_success 'unpack-file for encrypted loose object' '
+	oid=$(git -C bare.git rev-parse $G:topic-1.txt) &&
+	tmpfile=$(git -C bare.git unpack-file $oid) &&
+	cat >expect <<-EOF &&
+	Commit-G
+	EOF
+	test_cmp expect "bare.git/$tmpfile"
+'
+
+test_expect_success 'unpack-file for encrypted loose object' '
+	oid=$(git -C bare.git rev-parse $F:README.txt) &&
+	tmpfile=$(git -C bare.git unpack-file $oid) &&
+	cat >expect <<-EOF &&
+	Commit-A
+	Commit-B
+	Commit-C
+	Commit-D
+	Commit-E
+	Commit-F
+	EOF
+	test_cmp expect "bare.git/$tmpfile"
+'
diff --git a/t/t0940/test-1034-verify-commit.sh b/t/t0940/test-1034-verify-commit.sh
new file mode 100644
index 0000000000..a71bc84532
--- /dev/null
+++ b/t/t0940/test-1034-verify-commit.sh
@@ -0,0 +1,34 @@
+#!/bin/sh
+
+# Test crypto on "git-verify-commit"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success GPG 'create gpg signed commit' '
+	git clone --no-local bare.git workdir &&
+	(
+		cd workdir &&
+		touch signed.txt &&
+		git add signed.txt &&
+		git commit -S -m "Test for signed commit" &&
+		git push
+	) &&
+	S=$(git -C bare.git rev-parse HEAD)
+'
+
+test_expect_success GPG 'verify-commit on loose commit object: $S' '
+	(
+		cd bare.git &&
+		git verify-commit -v $S
+	)
+'
+
+test_expect_success GPG 'verify-commit on packed commit object: $S' '
+	(
+		cd bare.git &&
+		git gc &&
+		git verify-commit -v $S
+	)
+'
diff --git a/t/t0940/test-1035-verify-pack.sh b/t/t0940/test-1035-verify-pack.sh
new file mode 100644
index 0000000000..754cf81a2e
--- /dev/null
+++ b/t/t0940/test-1035-verify-pack.sh
@@ -0,0 +1,11 @@
+#!/bin/sh
+
+# Test crypto on "git-verify-pack"
+
+test_expect_success 'git verify-pack PACK1' '
+	git -C "$COMMON_GITDIR" verify-pack objects/pack/pack-$PACK1.idx
+'
+
+test_expect_success 'git verify-pack PACK2' '
+	git -C "$COMMON_GITDIR" verify-pack objects/pack/pack-$PACK2.idx
+'
diff --git a/t/t0940/test-1036-write-tree.sh b/t/t0940/test-1036-write-tree.sh
new file mode 100644
index 0000000000..7fdf1aec20
--- /dev/null
+++ b/t/t0940/test-1036-write-tree.sh
@@ -0,0 +1,61 @@
+#!/bin/sh
+
+# Test crypto on "git-write-tree"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git
+'
+
+test_expect_success 'create blob' '
+	cat >bare.git/_data <<-EOF &&
+	Input data for hash-object.
+	EOF
+	oid=$(git -C bare.git hash-object -t blob -w _data)
+'
+
+test_expect_success 'create tree' '
+	cat >bare.git/_tree <<-EOF &&
+	100644 blob $oid	data.txt
+	EOF
+	tid1=$(git -C bare.git mktree <bare.git/_tree) &&
+	git -C bare.git ls-tree -r $tid1 >actual &&
+	cat >expect <<-EOF &&
+	100644 blob $oid	data.txt
+	EOF
+	test_cmp expect actual
+'
+
+# read tree to index
+test_expect_success 'read-tree into subdir of index' '
+	git -C bare.git read-tree -i --index-output=_index \
+		--prefix="src/" $tid1
+'
+
+# create tree from index
+test_expect_success 'write-tree of "src/data.txt"' '
+	tid2=$(GIT_INDEX_FILE=_index git -C bare.git write-tree) &&
+	git -C bare.git ls-tree -r $tid2 >actual &&
+	cat >expect <<-EOF &&
+	100644 blob $oid	src/data.txt
+	EOF
+	test_cmp expect actual
+'
+
+# merge tid2 and main to index
+test_expect_success 'merge two trees' '
+	empty_tree=$(git hash-object -t tree --stdin </dev/null) &&
+	git -C bare.git read-tree -i -m --index-output=_index \
+		$empty_tree $tid2 main
+'
+
+# create tree of merge result
+test_expect_success 'create tree of merged result ' '
+	merged=$(GIT_INDEX_FILE=_index git -C bare.git write-tree) &&
+	git -C bare.git ls-tree -r $merged |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	100644 blob <OID>    README.txt
+	100644 blob <OID>    src/data.txt
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1037-unpack-objects.sh b/t/t0940/test-1037-unpack-objects.sh
new file mode 100644
index 0000000000..c6725c9678
--- /dev/null
+++ b/t/t0940/test-1037-unpack-objects.sh
@@ -0,0 +1,63 @@
+#!/bin/sh
+
+# Test crypto on "git-unpack-objects"
+
+test_expect_success 'setup' '
+	cp -R "$COMMON_GITDIR" bare.git &&
+
+	# create test.git and copy agit.crypto settings from bare.git
+	create_bare_repo test.git &&
+	cp bare.git/config test.git/config
+'
+
+cat >expect <<-\EOF &&
+0000000 50 41 43 4b 00 00 00 02 00 00 00 03                | PACK........     |
+EOF
+
+test_expect_success 'PACK1 is unencrypted' '
+	test_copy_bytes 12 <bare.git/objects/pack/pack-$PACK1.pack |
+		test-tool agit-od >actual &&
+	test_cmp expect actual
+'
+
+test_expect_success 'unpack-objects from unencrypted packfile' '
+	git -C test.git unpack-objects <bare.git/objects/pack/pack-$PACK1.pack
+'
+
+cat >expect_1 <<-\EOF
+0000000 50 41 43 4b 81 00 00 02 00 00 00 03 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+cat >expect_2 <<-\EOF
+0000000 50 41 43 4b 82 00 00 02 00 00 00 03 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+cat >expect_64 <<-\EOF
+0000000 50 41 43 4b c0 61 72 02 00 00 00 03                | PACK.ar.....     |
+EOF
+
+cat >expect_65 <<-\EOF
+0000000 50 41 43 4b c1 61 72 02 00 00 00 03                | PACK.ar.....     |
+EOF
+
+test_expect_success 'PACK2 is encrypted' '
+	show_pack_header <bare.git/objects/pack/pack-$PACK2.pack |
+		test-tool agit-od >actual &&
+	test_cmp expect_${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
+'
+
+test_expect_success 'unpack-objects from encrypted packfile' '
+	git -C test.git unpack-objects <bare.git/objects/pack/pack-$PACK2.pack
+'
+
+test_expect_success 'check history' '
+	git -C test.git log --oneline $F |
+		make_user_friendly_and_stable_output >actual &&
+	cat >expect <<-EOF &&
+	<COMMIT-F> Commit-F
+	<COMMIT-C> Commit-C
+	EOF
+	test_cmp expect actual
+'
diff --git a/t/t0940/test-1039-gc-and-repack.sh b/t/t0940/test-1039-gc-and-repack.sh
new file mode 100644
index 0000000000..b3f9195750
--- /dev/null
+++ b/t/t0940/test-1039-gc-and-repack.sh
@@ -0,0 +1,83 @@
+#!/bin/sh
+
+# Test encrypted loose object
+
+test_expect_success 'setup' '
+	git config agit.crypto.enabled 1 &&
+	git config agit.crypto.secret c2VjcmV0LXRva2VuMTIzNA== &&
+	git config agit.crypto.nonce random_nonce
+'
+
+test_expect_success 'create commits' '
+	test_commit A &&
+	test_commit B
+'
+
+cat >expect.algo-1 <<-EOF &&
+0000000 50 41 43 4b 81 00 00 02 00 00 00 06 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+cat >expect.algo-2 <<-EOF &&
+0000000 50 41 43 4b 82 00 00 02 00 00 00 06 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+cat >expect.algo-64 <<-EOF &&
+0000000 50 41 43 4b c0 61 72 02 00 00 00 06                | PACK.ar.....     |
+EOF
+
+cat >expect.algo-65 <<-EOF &&
+0000000 50 41 43 4b c1 61 72 02 00 00 00 06                | PACK.ar.....     |
+EOF
+
+test_expect_success 'git gc: create encrypted packfile' '
+	git gc &&
+	pack=".git/objects/pack/pack-*.pack" &&
+	cat $pack | show_pack_header | test-tool agit-od >actual &&
+	cat >expect <<-\EOF &&
+	EOF
+	test_cmp expect.algo-${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
+'
+
+test_expect_success 'git fsck' '
+	git fsck
+'
+
+test_expect_success 'create more commits' '
+	test_commit C &&
+	test_commit D
+'
+
+# algorithm: benchmark
+cat >expect.algo-1 <<-EOF &&
+0000000 50 41 43 4b 81 00 00 02 00 00 00 0c 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+# algorithm: aes
+cat >expect.algo-2 <<-EOF &&
+0000000 50 41 43 4b 82 00 00 02 00 00 00 0c 72 61 6e 64    | PACK........rand |
+0000016 6f 6d 5f 6e 6f 6e 63 65                            | om_nonce         |
+EOF
+
+cat >expect.algo-64 <<-EOF &&
+0000000 50 41 43 4b c0 61 72 02 00 00 00 0c                | PACK.ar.....     |
+EOF
+
+cat >expect.algo-65 <<-EOF &&
+0000000 50 41 43 4b c1 61 72 02 00 00 00 0c                | PACK.ar.....     |
+EOF
+
+test_expect_success 'git repack' '
+	git repack -ad &&
+	pack=".git/objects/pack/pack-*.pack" &&
+	cat $pack | show_pack_header | test-tool agit-od >actual &&
+	cat >expect <<-\EOF &&
+	EOF
+	test_cmp expect.algo-${GIT_TEST_CRYPTO_ALGORITHM_TYPE} actual
+'
+
+test_expect_success 'git fsck after repack' '
+	git fsck
+'
-- 
patchwork
