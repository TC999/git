From 5596dbf3d6ce844e61b46f4e4bc74e267a4646ef Mon Sep 17 00:00:00 2001
From: Han Xin <hanxin.hx@alibaba-inc.com>
Date: Tue, 7 Dec 2021 10:59:55 +0800
Subject: [PATCH 52/56] object-file.c: make "write_object_file_flags()" to
 support "HASH_STREAM"

We will use "write_object_file_flags()" in "unpack_non_delta_entry()" to
read the entire data contents in stream. When read in stream, we needn't
prepare "oid" before "write_loose_object()", only generate the header.

Signed-off-by: Han Xin <hanxin.hx@alibaba-inc.com>
---
 object-file.c | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/object-file.c b/object-file.c
index 3d73ea2b30..44ebf76063 100644
--- a/object-file.c
+++ b/object-file.c
@@ -2021,14 +2021,13 @@ static int write_loose_object(struct object_id *oid, char *hdr,
 		if (flags & HASH_STREAM) {
 			struct input_stream *in_stream =
 				(struct input_stream *)buf;
-			if (!stream.avail_in &&
-			    in_stream->has_next(in_stream)) {
+			if (!stream.avail_in && !in_stream->is_finished) {
 				const void *in = in_stream->read(
 					in_stream, &stream.avail_in);
 				stream.next_in = (void *)in;
 				in0 = (unsigned char *)in;
 				/* All data has been read. */
-				if (!in_stream->has_next(in_stream))
+				if (in_stream->is_finished)
 					flush = Z_FINISH;
 			}
 		}
@@ -2096,6 +2095,11 @@ int write_object_file_flags(const void *buf, unsigned long len,
 {
 	char hdr[MAX_HEADER_LEN];
 	int hdrlen = sizeof(hdr);
+	if (flags & HASH_STREAM) {
+		/* Generate the header */
+		hdrlen = xsnprintf(hdr, hdrlen, "%s %"PRIuMAX , type, (uintmax_t)len)+1;
+		return write_loose_object(oid, hdr, hdrlen, buf, len, 0, flags);
+	}
 
 	/* Normally if we have it in the pack then we do not bother writing
 	 * it out into .git/objects/??/?{38} file.
-- 
patchwork
