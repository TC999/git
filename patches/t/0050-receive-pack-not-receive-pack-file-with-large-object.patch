From f210528100564c1c0cfb62200cdb55de8e0a68ff Mon Sep 17 00:00:00 2001
From: Han Xin <hanxin.hx@alibaba-inc.com>
Date: Thu, 30 Sep 2021 10:58:12 +0800
Subject: [PATCH 50/52] receive-pack: not receive pack file with large object

In addition to using 'receive.maxInputSize' to limit the overall size
of the received packfile, a new config variable
'receive.maxInputObjectSize' and 'receive.maxInputBlobSize' is added to
limit the push of a single object larger than this threshold.

Signed-off-by: Han Xin <hanxin.hx@alibaba-inc.com>
---
 Documentation/config/receive.txt | 12 +++++++++++
 builtin/index-pack.c             | 34 ++++++++++++++++++++++++++++-
 builtin/receive-pack.c           | 24 +++++++++++++++++++++
 builtin/unpack-objects.c         | 37 +++++++++++++++++++++++++++++++-
 t/t5546-receive-limits.sh        | 29 +++++++++++++++++++++++++
 5 files changed, 134 insertions(+), 2 deletions(-)

diff --git a/Documentation/config/receive.txt b/Documentation/config/receive.txt
index 85d5b5a3d2..2c070709f6 100644
--- a/Documentation/config/receive.txt
+++ b/Documentation/config/receive.txt
@@ -74,6 +74,18 @@ receive.maxInputSize::
 	accepting the pack file. If not set or set to 0, then the size
 	is unlimited.
 
+receive.maxInputBlobSize::
+	If one of the blobs in the incoming pack stream is larger than
+	this limit, then git-receive-pack will error out, instead of
+	accepting the pack file. If not set or set to 0, then the size
+	will use receive.maxInputObjectSize instead or be unlimited.
+
+receive.maxInputObjectSize::
+	If one of the objects in the incoming pack stream is larger than
+	this limit, then git-receive-pack will error out, instead of
+	accepting the pack file. If not set or set to 0, then the size
+	is unlimited.
+
 receive.denyDeletes::
 	If set to true, git-receive-pack will deny a ref update that deletes
 	the ref. Use this to prevent such a ref deletion via a push.
diff --git a/builtin/index-pack.c b/builtin/index-pack.c
index 680b66b063..b9959c8aed 100644
--- a/builtin/index-pack.c
+++ b/builtin/index-pack.c
@@ -134,6 +134,8 @@ static unsigned char input_buffer[4096];
 static unsigned int input_offset, input_len;
 static off_t consumed_bytes;
 static off_t max_input_size;
+static off_t max_input_object_size;
+static off_t max_input_blob_size;
 static unsigned deepest_delta;
 static git_hash_ctx input_ctx;
 static uint32_t input_crc32;
@@ -489,6 +491,25 @@ static void *unpack_entry_data(off_t offset, unsigned long size,
 	return buf == fixed_buf ? NULL : buf;
 }
 
+static void check_input_object(const char *type_name, unsigned long size)
+{
+	if (max_input_object_size && size > max_input_object_size)
+		die(_("%s exceeds maximum allowed size %ld over %"PRIuMAX),
+		    type_name, size, (uintmax_t)max_input_object_size);
+}
+
+static void check_input_blob(unsigned long size)
+{
+	/* use blob size limit for delta */
+	if (max_input_blob_size) {
+		if (size > max_input_blob_size)
+			die(_("object exceeds maximum allowed size %ld over %"PRIuMAX),
+			    size, (uintmax_t)max_input_blob_size);
+	} else {
+		check_input_object("object", size);
+	}
+}
+
 static void *unpack_raw_entry(struct object_entry *obj,
 			      off_t *ofs_offset,
 			      struct object_id *ref_oid,
@@ -520,10 +541,14 @@ static void *unpack_raw_entry(struct object_entry *obj,
 
 	switch (obj->type) {
 	case OBJ_REF_DELTA:
+		/* use blob size limit for delta */
+		check_input_blob(size);
 		oidread(ref_oid, fill(the_hash_algo->rawsz));
 		use(the_hash_algo->rawsz);
 		break;
 	case OBJ_OFS_DELTA:
+		/* use blob size limit for delta */
+		check_input_blob(size);
 		p = fill(1);
 		c = *p;
 		use(1);
@@ -541,10 +566,13 @@ static void *unpack_raw_entry(struct object_entry *obj,
 		if (*ofs_offset <= 0 || *ofs_offset >= obj->idx.offset)
 			bad_object(obj->idx.offset, _("delta base offset is out of bound"));
 		break;
+	case OBJ_BLOB:
+		check_input_blob(size);
+		break;
 	case OBJ_COMMIT:
 	case OBJ_TREE:
-	case OBJ_BLOB:
 	case OBJ_TAG:
+		check_input_object(type_name(obj->type), size);
 		break;
 	default:
 		bad_object(obj->idx.offset, _("unknown object type %d"), obj->type);
@@ -1829,6 +1857,10 @@ int cmd_index_pack(int argc, const char **argv, const char *prefix)
 					die(_("bad %s"), arg);
 			} else if (skip_prefix(arg, "--max-input-size=", &arg)) {
 				max_input_size = strtoumax(arg, NULL, 10);
+			} else if (skip_prefix(arg, "--max-input-blob-size=", &arg)) {
+				max_input_blob_size = strtoumax(arg, NULL, 10);
+			} else if (skip_prefix(arg, "--max-input-object-size=", &arg)) {
+				max_input_object_size = strtoumax(arg, NULL, 10);
 			} else if (skip_prefix(arg, "--object-format=", &arg)) {
 				hash_algo = hash_algo_by_name(arg);
 				if (hash_algo == GIT_HASH_UNKNOWN)
diff --git a/builtin/receive-pack.c b/builtin/receive-pack.c
index 9aabffa1af..3b9f08466c 100644
--- a/builtin/receive-pack.c
+++ b/builtin/receive-pack.c
@@ -58,6 +58,8 @@ static int advertise_push_options;
 static int advertise_sid;
 static int unpack_limit = 100;
 static off_t max_input_size;
+static off_t max_input_blob_size;
+static off_t max_input_object_size;
 static int report_status;
 static int report_status_v2;
 static int use_sideband;
@@ -247,6 +249,16 @@ static int receive_pack_config(const char *var, const char *value, void *cb)
 		return 0;
 	}
 
+	if (strcmp(var, "receive.maxinputblobsize") == 0) {
+		max_input_blob_size = git_config_int64(var, value);
+		return 0;
+	}
+
+	if (strcmp(var, "receive.maxinputobjectsize") == 0) {
+		max_input_object_size = git_config_int64(var, value);
+		return 0;
+	}
+
 	if (strcmp(var, "receive.procreceiverefs") == 0) {
 		if (!value)
 			return config_error_nonbool(var);
@@ -2235,6 +2247,12 @@ static const char *unpack(int err_fd, struct shallow_info *si)
 		if (max_input_size)
 			strvec_pushf(&child.args, "--max-input-size=%"PRIuMAX,
 				     (uintmax_t)max_input_size);
+		if (max_input_object_size)
+			strvec_pushf(&child.args, "--max-input-object-size=%"PRIuMAX,
+				     (uintmax_t)max_input_object_size);
+		if (max_input_blob_size)
+			strvec_pushf(&child.args, "--max-input-blob-size=%"PRIuMAX,
+				     (uintmax_t)max_input_blob_size);
 		child.no_stdout = 1;
 		child.err = err_fd;
 		child.git_cmd = 1;
@@ -2266,6 +2284,12 @@ static const char *unpack(int err_fd, struct shallow_info *si)
 		if (max_input_size)
 			strvec_pushf(&child.args, "--max-input-size=%"PRIuMAX,
 				     (uintmax_t)max_input_size);
+		if (max_input_object_size)
+			strvec_pushf(&child.args, "--max-input-object-size=%"PRIuMAX,
+				     (uintmax_t)max_input_object_size);
+		if (max_input_blob_size)
+			strvec_pushf(&child.args, "--max-input-blob-size=%"PRIuMAX,
+				     (uintmax_t)max_input_blob_size);
 		child.out = -1;
 		child.err = err_fd;
 		child.git_cmd = 1;
diff --git a/builtin/unpack-objects.c b/builtin/unpack-objects.c
index 41d6674e59..8eba632df4 100644
--- a/builtin/unpack-objects.c
+++ b/builtin/unpack-objects.c
@@ -22,6 +22,8 @@ static unsigned char buffer[4096];
 static unsigned int offset, len;
 static off_t consumed_bytes;
 static off_t max_input_size;
+static off_t max_input_object_size;
+static off_t max_input_blob_size;
 static git_hash_ctx ctx;
 static struct fsck_options fsck_options = FSCK_OPTIONS_STRICT;
 static struct progress *progress;
@@ -525,6 +527,25 @@ static void unpack_delta_entry(enum object_type type, unsigned long delta_size,
 	free(base);
 }
 
+static void check_input_object(const char *type_name, unsigned long size)
+{
+	if (max_input_object_size && size > max_input_object_size)
+		die(_("%s exceeds maximum allowed size %ld over %"PRIuMAX),
+		    type_name, size, (uintmax_t)max_input_object_size);
+}
+
+static void check_input_blob(unsigned long size)
+{
+	/* use blob size limit for delta */
+	if (max_input_blob_size) {
+		if (size > max_input_blob_size)
+			die(_("object exceeds maximum allowed size %ld over %"PRIuMAX),
+			    size, (uintmax_t)max_input_blob_size);
+	} else {
+		check_input_object("object", size);
+	}
+}
+
 static void unpack_one(unsigned nr)
 {
 	unsigned shift;
@@ -549,14 +570,20 @@ static void unpack_one(unsigned nr)
 	}
 
 	switch (type) {
+	case OBJ_BLOB:
+		check_input_blob(size);
+		unpack_non_delta_entry(type, size, nr);
+		return;
 	case OBJ_COMMIT:
 	case OBJ_TREE:
-	case OBJ_BLOB:
 	case OBJ_TAG:
+		check_input_object(type_name(type), size);
 		unpack_non_delta_entry(type, size, nr);
 		return;
 	case OBJ_REF_DELTA:
 	case OBJ_OFS_DELTA:
+		/* use blob size limit for delta */
+		check_input_blob(size);
 		unpack_delta_entry(type, size, nr);
 		return;
 	default:
@@ -650,6 +677,14 @@ int cmd_unpack_objects(int argc, const char **argv, const char *prefix)
 				max_input_size = strtoumax(arg, NULL, 10);
 				continue;
 			}
+			if (skip_prefix(arg, "--max-input-blob-size=", &arg)) {
+				max_input_blob_size = strtoumax(arg, NULL, 10);
+				continue;
+			}
+			if (skip_prefix(arg, "--max-input-object-size=", &arg)) {
+				max_input_object_size = strtoumax(arg, NULL, 10);
+				continue;
+			}
 			usage(unpack_usage);
 		}
 
diff --git a/t/t5546-receive-limits.sh b/t/t5546-receive-limits.sh
index 0b0e987fdb..13c06e2c4f 100755
--- a/t/t5546-receive-limits.sh
+++ b/t/t5546-receive-limits.sh
@@ -1,6 +1,10 @@
 #!/bin/sh
 
 test_description='check receive input limits'
+
+GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
+export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
+
 . ./test-lib.sh
 
 # Let's run tests with different unpack limits: 1 and 10000
@@ -41,6 +45,31 @@ test_pack_input_limit () {
 		git --git-dir=dest config receive.maxInputSize 0 &&
 		git push dest HEAD
 	'
+
+	test_expect_success 'prepare destination repository (test for large object)' '
+		rm -fr dest &&
+		git --bare init dest
+	'
+
+	test_expect_success 'setting receive.maxInputObjectSize to 512 rejects push large object' '
+		git -C dest config receive.maxInputObjectSize 512 &&
+		test_must_fail git push dest HEAD
+	'
+
+	test_expect_success 'bumping limit to 2k allows push large object' '
+		git -C dest config receive.maxInputObjectSize 2k &&
+		git push dest HEAD
+	'
+
+	test_expect_success 'prepare destination repository (test for large object,again)' '
+		rm -fr dest &&
+		git --bare init dest
+	'
+
+	test_expect_success 'lifting the limit allows push' '
+		git -C dest config receive.maxInputObjectSize 0 &&
+		git push dest HEAD
+	'
 }
 
 test_expect_success "create known-size (1024 bytes) commit" '
-- 
2.34.1.51.g7e1f4e9345.agit.6.5.6

