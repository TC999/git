From 51178c0b96a8a2e8b68901d61058f97031bd9a68 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E7=82=BD=E5=A4=A9?= <hanxin.hx@alibaba-inc.com>
Date: Thu, 10 Dec 2020 13:53:55 +0800
Subject: [PATCH 21/42] crypto: trace: add trace hexdump

trace_hexdump_key() will help us to dump the hex data.

Signed-off-by: Han Xin <hanxin.hx@alibaba-inc.com>
Signed-off-by: Jiang Xin <zhiyou.jx@alibaba-inc.com>
---
 trace.c | 34 ++++++++++++++++++++++++++++++++++
 trace.h |  7 +++++++
 2 files changed, 41 insertions(+)

diff --git a/trace.c b/trace.c
index 794a087c21..23aa7d1aea 100644
--- a/trace.c
+++ b/trace.c
@@ -27,6 +27,7 @@
 struct trace_key trace_default_key = { "GIT_TRACE", 0, 0, 0 };
 struct trace_key trace_perf_key = TRACE_KEY_INIT(PERFORMANCE);
 struct trace_key trace_setup_key = TRACE_KEY_INIT(SETUP);
+struct trace_key trace_crypto_key = TRACE_KEY_INIT(CRYPTO);
 
 /* Get a trace file descriptor from "key" env variable. */
 static int get_trace_fd(struct trace_key *key, const char *override_envvar)
@@ -224,6 +225,39 @@ static void trace_performance_vprintf_fl(const char *file, int line,
 	strbuf_release(&buf);
 }
 
+void trace_hexdump_key(struct trace_key *key, const char *name, const void *ptr,
+		       unsigned long len)
+{
+	const unsigned char *p = (const unsigned char *)ptr;
+	struct strbuf buf = STRBUF_INIT;
+	struct strbuf asc_buf = STRBUF_INIT;
+	unsigned long i = 0;
+
+	if (!trace_want(key))
+		return;
+
+	if (name)
+		trace_printf_key(key, "# %s hexdump (%lu bytes):\n", name, len);
+
+	for (i = 0; i < len; i++, p++) {
+		if (i % 16 == 0) {
+			if (i > 0)
+				trace_printf_key(key, "%-55s    | %-16s |\n",
+						 buf.buf, asc_buf.buf);
+			strbuf_reset(&buf);
+			strbuf_reset(&asc_buf);
+			strbuf_addf(&buf, "%07lu", i);
+		}
+		strbuf_addf(&buf, " %02x", *p);
+		strbuf_addch(&asc_buf, isprint(*p) ? *p : '.');
+	}
+	if (buf.len)
+		trace_printf_key(key, "%-55s    | %-16s |\n", buf.buf,
+				 asc_buf.buf);
+	strbuf_release(&buf);
+	strbuf_release(&asc_buf);
+}
+
 void trace_printf_key_fl(const char *file, int line, struct trace_key *key,
 			 const char *format, ...)
 {
diff --git a/trace.h b/trace.h
index 4e771f86ac..2eab65b038 100644
--- a/trace.h
+++ b/trace.h
@@ -92,6 +92,7 @@ extern struct trace_key trace_default_key;
 #define TRACE_KEY_INIT(name) { .key = "GIT_TRACE_" #name }
 extern struct trace_key trace_perf_key;
 extern struct trace_key trace_setup_key;
+extern struct trace_key trace_crypto_key;
 
 void trace_repo_setup(const char *prefix);
 
@@ -126,6 +127,12 @@ void trace_command_performance(const char **argv);
 void trace_verbatim(struct trace_key *key, const void *buf, unsigned len);
 uint64_t trace_performance_enter(void);
 
+/**
+ * Show hexadecimal dump of data for if turn on specific trace_key.
+ */
+void trace_hexdump_key(struct trace_key *key, const char *name, const void *ptr,
+		       unsigned long len);
+
 /*
  * TRACE_CONTEXT may be set to __FUNCTION__ if the compiler supports it. The
  * default is __FILE__, as it is consistent with assert(), and static function
-- 
patchwork
